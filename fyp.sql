-- phpMyAdmin SQL Dump
-- version 5.0.2
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1:3306
-- Generation Time: Jul 04, 2021 at 02:52 PM
-- Server version: 5.7.31
-- PHP Version: 7.3.21

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `fyp`
--

-- --------------------------------------------------------

--
-- Table structure for table `admins`
--

DROP TABLE IF EXISTS `admins`;
CREATE TABLE IF NOT EXISTS `admins` (
  `adminID` int(11) NOT NULL,
  `adminName` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`adminID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `admins`
--

INSERT INTO `admins` (`adminID`, `adminName`, `password`) VALUES
(48763, 'Lye Boon Jet', '$2y$12$2CUam9t47bulEAVh0hGEFeeniu6MdHLEen7pK74G4UkFCMlV78lYO'),
(2000000, 'Dummy Admin', '$2y$10$a3s6wy1fWYJe9hQJkrev.eFp5HfuAtQMquOK5fPDIGX5m/9O9ddVG');

-- --------------------------------------------------------

--
-- Table structure for table `chats`
--

DROP TABLE IF EXISTS `chats`;
CREATE TABLE IF NOT EXISTS `chats` (
  `chatID` int(11) NOT NULL AUTO_INCREMENT,
  `chatText` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `chatDateTime` datetime NOT NULL,
  `studentID` int(11) NOT NULL,
  PRIMARY KEY (`chatID`),
  KEY `chatStudentID` (`studentID`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `chats`
--

INSERT INTO `chats` (`chatID`, `chatText`, `chatDateTime`, `studentID`) VALUES
(1, 'Red sus', '2021-06-24 17:33:23', 1000000),
(2, 'Blue sus', '2021-06-24 17:33:39', 1100000),
(4, 'Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red Vote red', '2021-06-24 17:34:14', 1000000),
(5, 'Emergency meeting!', '2021-06-24 20:41:59', 1000000),
(6, 'Lmao Yeet', '2021-06-24 20:42:43', 1100000),
(8, 'Say something', '2021-06-27 20:44:36', 1000000),
(9, 'a', '2021-06-27 20:54:22', 1000000),
(10, 'bruh', '2021-06-27 20:54:52', 1000000),
(11, 'huh', '2021-06-27 20:57:39', 1000000),
(12, 'waddaya mean?', '2021-06-27 20:57:46', 1000000),
(13, 'Amogus', '2021-06-28 09:53:17', 1000000),
(14, 'Test some shit', '2021-07-02 23:36:30', 1000000);

-- --------------------------------------------------------

--
-- Table structure for table `exercises`
--

DROP TABLE IF EXISTS `exercises`;
CREATE TABLE IF NOT EXISTS `exercises` (
  `exerciseID` int(11) NOT NULL AUTO_INCREMENT,
  `exerciseText` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `blank1` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `blank2` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `blank3` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `topicID` int(11) NOT NULL,
  PRIMARY KEY (`exerciseID`),
  KEY `topicIDExercise` (`topicID`)
) ENGINE=InnoDB AUTO_INCREMENT=57 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `exercises`
--

INSERT INTO `exercises` (`exerciseID`, `exerciseText`, `blank1`, `blank2`, `blank3`, `topicID`) VALUES
(1, 'Determine the constant and variable based on the code segment below.\r\n\r\n_____ numberOfDays = 7\r\n_____ myAge = 22\r\nmyAge = 23\r\n', 'let', 'var', NULL, 1),
(2, 'Which statements will return a compile error?\r\n\r\na. let result = 45.78 * 2\r\nb. let ten = 10\r\nc. let price = 17.50\r\nd. let newPrice = price - ten\r\nStatement ___ and ___ will return a compile error.\r\n', 'a', 'd', NULL, 1),
(3, 'What is the word size of this integer data type?\r\n\r\nlet test = Int.max\r\n// Maximum value of the variable \'test\' is 2147483647\r\nThe word size of this integer is _____-bit.\r\n', '32', NULL, NULL, 1),
(4, 'How many decimal digits can be shown by a 64-bit floating-point number?\r\n\r\n____ decimal digits.\r\n', '15', NULL, NULL, 1),
(5, 'A variable named \"myMoney\" has been assigned with a value of 1243.83. Although you already know this variable has been annotated to Double data type. But how do you check it again by using a code?\r\n\r\nprint(_________)\r\n', 'type(of:myMoney)', NULL, NULL, 1),
(6, 'Determine the value for this statement.\r\n\r\nvar a = 20\r\nvar b = 8\r\nprint(a / b)\r\nThe value is _____\r\n', '2', NULL, NULL, 1),
(7, 'Based on the previous question, how to show the correct value with decimals, without changing the value of the variable itself?\r\n\r\nprint(_______ / ______)\r\n', 'Double(a)', 'Double(b)', NULL, 1),
(8, 'Write a statement to create a String variable named str1 containing the string “abc”.\r\n\r\nvar ____ = ____\r\n', 'str1', 'abc', NULL, 2),
(9, 'Declare the statement to create an empty String variable named emptyStr with an initializer syntax.\r\n\r\nvar emptyStr = ______\r\n', 'String()', NULL, NULL, 2),
(10, 'Based on the previous question, use a String instance property to check whether the String is empty or not.\r\n\r\nif (_________) {\r\n     print(\"This string is empty\");\r\n} else {\r\n     print(\"This string is not empty\");\r\n}\r\n', 'emptyStr.isEmpty', NULL, NULL, 2),
(11, 'Use the following characters to form a String.\r\n\r\nlet utarChar: [_________] = [\"U\", \"T\", \"A\", \"R\"]\r\nlet utarStr = _______________\r\n', 'Character', 'String(utarChar)', NULL, 2),
(12, 'What is the output for the following code?\r\n\r\nvar str1 = \"My third Apple device is \"\r\nvar str2 = \"iPhone 12 Pro Max.\"\r\nstr1 += str2\r\nprint(str1)\r\nThe output is: ________________\r\n', 'My third Apple device is iPhone 12 Pro Max.', NULL, NULL, 2),
(13, 'Add a question mark in this String. Remember to use double quotation mark.\r\n\r\nvar aSentence = \"Should I buy an iPad or a Mac\"\r\naSentence.__________\r\n', 'append(\"?\")', NULL, NULL, 2),
(14, 'How many characters in this String?\r\n\r\nlet str = \"Apple released Mac with Apple Silicon.\"\r\nprint(str.count)\r\n', '38', NULL, NULL, 2),
(15, 'Based on the following If statement codes, which are the correct ones?\r\n\r\na. if condition statement\r\nb. if condition {statement}\r\nc. if (condition) statement\r\nd. if (condition) {statement}\r\ne. if () {statement}\r\n\r\n___ and ___ are the correct ones.\r\n', 'b', 'd', NULL, 3),
(16, 'Based on the following If-Else statement, if the user is 17 years old, what will be the output?\r\n\r\nif userAge > 17 {\r\n     print(\"You are adult\")\r\n} else {\r\n     print(\"You are not adult\")\r\n}\r\n', 'You are not adult', NULL, NULL, 3),
(17, 'Complete the following If-Else statements.\r\n\r\nif condtion1 {\r\n     statement1\r\n} ________ condition2 {\r\n     statement2\r\n} else {\r\n     condition3\r\n}\r\n', 'else if', NULL, NULL, 3),
(18, 'In the conditional statements, what is the data type that will be returned from the condition(s)?\r\n\r\na. String\r\nb. Int\r\nc. Double\r\nd. Bool\r\n', 'd', NULL, NULL, 3),
(19, 'Which keywords combinations belongs to the Switch Staments?\r\n\r\na. class, else, default, for\r\nb. while, switch, if, struct\r\nc. switch, break, case, default\r\nd. let, break, while, else\r\n', 'c', NULL, NULL, 3),
(20, 'Based on the cases below, what will be the equivalent logical operators in If-Else statement?\r\n\r\nswitch something {\r\ncase 1, 2:\r\n     ...\r\n}\r\nif something == 1 ___ something == 2 {...}\r\n', '||', NULL, NULL, 3),
(21, 'Based on this code portion of Switch statement, will it report a compile-time error? (type lowercase \'yes\' or \'no\')\r\n\r\ncase \"b\":\r\ncase \"c\":\r\n    ...\r\n', 'Yes', NULL, NULL, 3),
(22, 'Create a new empty array with String data type.\r\n\r\nvar recentiPhone = __________\r\n', '[String]()', NULL, NULL, 4),
(23, 'Add 4 elements into the array.\r\n\r\nrecentiPhone _____ [\"iPhone 12 mini\", \"iPhone 12\", \"iPhone 12 Pro\", \"iPhone 12 Pro Max\"]\r\n\r\n// Now the array contains \"iPhone 12 mini\", \"iPhone 12\", \"iPhone 12 Pro\", \"iPhone 12 Pro Max\"\r\n', '+=', NULL, NULL, 4),
(24, 'Insert an element named \"iPhone 11\" into the first element in the array.\r\n\r\nrecentiPhone._______(\"iPhone 11\", at:___)\r\n\r\n// Now the array contains \"iPhone 11\", \"iPhone 12 mini\", \"iPhone 12\", \"iPhone 12 Pro\", \"iPhone 12 Pro Max\"\r\n', 'insert', '0', NULL, 4),
(25, 'Remove the second element from the array.\r\n\r\nrecentiPhone.________(at:____)\r\n\r\n// Now the array contains \"iPhone 11\", \"iPhone 12\", \"iPhone 12 Pro\", \"iPhone 12 Pro Max\"\r\n', 'remove', '1', NULL, 4),
(26, 'Replace the element \"iPhone 11\", \"iPhone 12\", \"iPhone 12 Pro\" to \"iPhone XS Max\", \"iPhone 11 Pro Max\"\r\n\r\nrecentiPhone[___...___] = [\"iPhone XS Max\", \"iPhone 11 Pro Max\"]\r\n\r\n// Now the array contains \"iPhone XS Max\", \"iPhone 11 Pro Max\", \"iPhone 12 Pro Max\"\r\n', '0', '2', NULL, 4),
(27, 'Based on the code and output below, what is the suitable range operator?\r\n\r\nfor i in 1____5{\r\n     print(i)\r\n}\r\n\r\n// 1 // 2 // 3 // 4 // 5\r\n', '…', NULL, NULL, 4),
(28, 'Based on the code and output below, which keyword is suitable for stride method?\r\n\r\nfor lmao in stride(from: 0, ______: 20, by: 5){\r\n     print(lmao)\r\n}\r\n\r\n// 0 // 5 // 10 // 15 // 20\r\n', 'through', NULL, NULL, 4),
(29, 'Fill in the correct code segment to make the variable can contains nil value. The data type is an Integer.\r\n\r\nvar yourAge: _____ = nil\r\n', 'Int?', NULL, NULL, 5),
(30, 'What is the output for this code? (Case and spacing are sensitive!)\r\n\r\nvar snoopdogg = \"420\"\r\nlet snoopydogg = Int(snoopdogg)\r\n\r\nprint(snoopydogg)\r\n', 'Optional(420)', NULL, NULL, 5),
(31, 'Based on the code from Question 2, what is the type for this constant?', 'Optional<Int>', NULL, NULL, 5),
(32, 'Based on the code in Question 2, to make the output become 420 instead of Optional(420), what is the correct code segment?\r\n\r\nif snoopydogg != nil {\r\nlet unwrappedSnoopy = __________ \r\n     print(unwrappedSnoopy)\r\n} else {\r\n     print(\"Valueless\")\r\n}\r\n', 'snoopydogg!', NULL, NULL, 5),
(33, 'Based on the code in Question 2, what is the alternative way to access the optional value? (Case and spacing is sensitive, use variable instead of constant.)\r\n\r\n________ actualSnoop = ________{\r\n     print(actualSnoop)\r\n} else {\r\n     print(\"This optional variable is valueless\")\r\n}\r\n', 'if var', 'Int(snoopdogg)', NULL, 5),
(34, 'Write the correct codes for implicitly unwrapped optional.\r\n\r\nlet assumedInt: ________ = 3\r\nlet implicitInt: Int = assumedInt\r\n', 'String!', NULL, NULL, 5),
(35, 'Choose the correct answer.\r\n\r\na. \r\n\r\nif assumedString != nil {\r\n     print(assumedString!)\r\n}\r\n\r\nb. \r\nif let definiteString = assumedString {\r\n     print(definiteString)\r\n}\r\n\r\n___ is optional binding.\r\n', 'b', NULL, NULL, 5),
(36, 'Put the correct keyword for the enumeration below.\r\n\r\n________ Rainbow {\r\n     _____ red, orange, yellow, green, blue, purple, pink\r\n}\r\n', 'enum', 'case', NULL, 6),
(37, 'How to retrieve the value \"purple\" from the enumeration from Question 1? \r\n\r\nvar favRainbow = ___________________\r\n', 'Rainbow.purple', NULL, NULL, 6),
(38, 'What is the return type for this function?\r\n\r\nfunc calculateTotal(price: _______, quantity: _______) -> _______ {\r\n      return price * quantity\r\n}\r\n\r\nprint(calculateTotal(price: 125.80, quantity: 4))\r\n', 'Double', 'Int', 'Double', 6),
(39, 'Fill in the parameters correctly to swap the parameter values from the function. All of the parameter data type is Integer.\r\n\r\nfunc swapTwoInts(_ a: ______, _ b: _______) {\r\n     let temporaryA = a\r\n     a = b\r\n     b = temporaryA\r\n}\r\n', 'inout Int', 'inout Int', NULL, 6),
(40, 'Based on the function in Question 4, call the function properly with appropriate parameter names which are firstNum and secondNum.\r\n\r\nswapTwoInts(________, ___________)\r\n', '&firstNum', '&secondNum', NULL, 6),
(41, 'Put the symbol correctly in the blank. What is this symbol means? (Case is sensitive!)\r\n\r\nfunc twoNum(numbers: [Int]) -> (first: Int, second: Int)____{\r\n     if numbers.isEmpty {\r\n          return nil\r\n     } else {\r\n          var currentFirst = numbers [0]\r\n          var currentSecond = numbers [0]\r\n          // some codes.\r\n     }\r\n\r\n     return (currentFirst, currentSecond)\r\n}\r\n\r\nThis symbol means that the tuple becomes an __________ tuple.\r\n', '?', 'optional', NULL, 6),
(42, 'Write a function without return values, with a return arrow and a return type. (Spacing and case are sensitive!)\r\n\r\nfunc someOutput() _________ {\r\n     // do something\r\n}\r\n', '-> Void', NULL, NULL, 6),
(43, 'Declare a dictionary with the name “days” where the key is an integer, and the value is a string. Also, initialize this dictionary with keys 1 to 3 corresponding to the days “Monday” to “Wednesday” (Do not put spacing before or after the colon symbol)\r\n\r\nvar days = [Int:String()] = [________, _________, __________]\r\n', '1:\"Monday\"', '2:\"Tuesday\"', '3:\"Wednesday\"', 7),
(44, 'Add a pair with key \"4\" and value \"Thursday\" to the dictionary.\r\n\r\ndays_____ = \"______\"\r\n', '[4]', '', NULL, 7),
(45, 'Retrieve the value from the key of 2 by using the variable \"sadDay\". Force unwrapping is a must.\r\n\r\nvar sadDay = _________\r\n', 'days[2]!', NULL, NULL, 7),
(46, 'Write code to print all the keys from the dictionary. Use \"num\" for the key and \"name\" for the value.\r\n\r\nfor (_______, ________) in days{\r\n     print(______)\r\n}\r\n// 2 // 1 // 4 // 3\r\n', 'num', 'name', 'key', 7),
(47, 'Change the value of the key 3 to \"Rabu\".\r\n\r\ndays_____ = \"______\"\r\n', '[3]', '\"Rabu\"', NULL, 7),
(48, 'Write a code to get the total number of items in the dictionary.\r\n\r\nprint(______________)\r\n\r\n// There\'re total of ____ key-value pairs in the dictionary.\r\n', 'days.count', '4', NULL, 7),
(49, 'Write a code to delete all items in the dictionary.\r\n\r\ndays = ______\r\n', '[:]', NULL, NULL, 7),
(50, 'Write a code to define a structure named Square with properties side and set to default values of 0.0.\r\n\r\n________________ {\r\n     var side = ________\r\n}\r\n', 'struct Square', '0.0', NULL, 8),
(51, 'Write code to create an instance of the structure Square and change the value of side to 10.0 respectively. (Spacing is sensitive!)\r\n\r\nlet aSquare = ________________________\r\n', 'Square(side: 10.0)', NULL, NULL, 8),
(52, 'Add a method named area to calculate the square area. And call the instance method for this structure. No parameter is needed.\r\n\r\nfunc ______ -> ______{\r\n     return side * side\r\n}\r\n\r\nprint(______________)\r\n', 'area()', 'Double', 'aSquare.area()', 8),
(53, 'Add a computed property called perimeter with a getter that returns the perimeter of the Square instance. Setter is not required.\r\n\r\nvar ________:________ {\r\n     return side * ___\r\n}\r\n', 'perimeter', 'Double', '4', 8),
(54, 'What is the keyword to access the property from a class directly instead of creating an instance?\r\n\r\nclass SomeThing {\r\n     _________ var someWord = \"Pepsi Cola\"\r\n}\r\n\r\nprint(SomeThing.someWord)\r\n', 'static', NULL, NULL, 8),
(55, 'This subclass is inherited by which superclass?\r\n\r\nclass AppleProduct {\r\n     var isARM = false\r\n}\r\n\r\nclass IOSProduct: AppleProduct {\r\n     var isTablet = false\r\n     func displayType(){\r\n          // do nothing\r\n     }\r\n}\r\nclass IPad: _________ {\r\n     var screenSize = 9.7\r\n}\r\n\r\nlet iPadAir = IPad()\r\n\r\niPadAir.isARM = true\r\niPadAir.isTablet = true\r\niPadAir.screenSize = 10.9\r\n', 'IOSProduct', NULL, NULL, 8),
(56, 'Based on the classes in Question 6, customize the displayType method that prints a String \"Liquid Retina XDR\" in IPad class.\r\n\r\n__________ displayType(){\r\n     print(\"Liquid Retina XDR\")\r\n}\r\n', 'override func', NULL, NULL, 8);

-- --------------------------------------------------------

--
-- Table structure for table `password_resets`
--

DROP TABLE IF EXISTS `password_resets`;
CREATE TABLE IF NOT EXISTS `password_resets` (
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `sixdigit` varchar(6) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  KEY `password_resets_email_index` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `quizhistories`
--

DROP TABLE IF EXISTS `quizhistories`;
CREATE TABLE IF NOT EXISTS `quizhistories` (
  `quizHistoryID` int(11) NOT NULL AUTO_INCREMENT,
  `totalQues` int(11) NOT NULL,
  `numCorrect` int(11) NOT NULL,
  `steps` int(11) NOT NULL,
  `timeTaken` int(11) NOT NULL,
  `topicID` int(11) NOT NULL,
  `studentID` int(11) NOT NULL,
  PRIMARY KEY (`quizHistoryID`),
  KEY `quizhistories_studentid_foreign` (`studentID`),
  KEY `quizhistories_topicid_foreign` (`topicID`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `quizhistories`
--

INSERT INTO `quizhistories` (`quizHistoryID`, `totalQues`, `numCorrect`, `steps`, `timeTaken`, `topicID`, `studentID`) VALUES
(1, 10, 10, 16, 16778, 3, 1000000),
(2, 10, 7, 24, 10000, 2, 1000000),
(3, 10, 9, 15, 10889, 3, 1000000),
(4, 10, 7, 16, 60776, 6, 1000000),
(5, 10, 10, 10, 36361, 1, 1000000);

-- --------------------------------------------------------

--
-- Table structure for table `quizzes`
--

DROP TABLE IF EXISTS `quizzes`;
CREATE TABLE IF NOT EXISTS `quizzes` (
  `quizID` int(11) NOT NULL AUTO_INCREMENT,
  `quizText` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `option1` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `option2` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `option3` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `option4` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `correctAns` enum('a','b','c','d') COLLATE utf8mb4_unicode_ci NOT NULL,
  `topicID` int(11) NOT NULL,
  PRIMARY KEY (`quizID`),
  KEY `topicIDQuiz` (`topicID`)
) ENGINE=InnoDB AUTO_INCREMENT=81 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `quizzes`
--

INSERT INTO `quizzes` (`quizID`, `quizText`, `option1`, `option2`, `option3`, `option4`, `correctAns`, `topicID`) VALUES
(1, 'Based on the code below, why is this code have a compile error?\r\n\r\nlet someVariable = 5;\r\nsomeVariable = 6;', 'The value should be number with decimals', 'The constant does not infer with a type', 'Constant value cannot be further modified', 'The whole statement does not have semicolon', 'c', 1),
(2, 'Based on the scenario below, choose a correct answer.\r\n\r\na. You can convert an integer to a floating-point number and vice versa.\r\nb. You need to make the numeric constant or variable implicit when you are converting.\r\nc. If a floating-point is converted into an integer, the decimal numbers still remain.\r\nd. You may use round() function to round off a floating-point value.\r\n', 'a, b, c', 'a, b, d', 'b, c, d', 'a, b, c, d', 'b', 1),
(3, 'Below are the codes without semicolon. What is the only condition that make a semicolon becomes mandatory in Swift?\r\n\r\nvar a = 0\r\nvar b = a + 1\r\n', 'When an array is declared', 'More than one statement on a same line', 'When a function returns a value', 'When a @objc is used', 'b', 1),
(4, 'What is the output for this integer?\r\n\r\nlet minValue = Int64.min', '-9223372036854775808', '0', '32768', '-128', 'a', 1),
(5, 'Double can show up to 15 decimal places but Float can only show up to 6 decimal places. True or false?', 'True', 'False', NULL, NULL, 'a', 1),
(6, 'What is the inferred type for this value-assigned variable?\r\n\r\nvar isYearThree = true\r\n', 'Int', 'Character', 'Bool', 'String', 'c', 1),
(7, 'What is the output for this arithmetic calculation?\r\n\r\nvar a = (10 % 6) / 2 + 3\r\n', '12', '7', '4', '5', 'd', 1),
(8, 'Based on the sentences, place the correct comparison operators.\r\n\r\na. I am bigger than you.\r\nb. I am smaller than you or same as you.\r\nc. We are totally different.\r\n', '>=, ==, !=', '<, !=, <=', '>=, >, !=', '>, <=, !=', 'd', 1),
(9, 'Based on the description and expression below, determine the correct comparison and logical operators.\r\n\r\nTo check whether you are qualified or not for attending industrial training, both of your CGPA and GPA must have at least 2.0, and earned 52 credit hours in your pre-trimester.\r\nif (CGPA __ 2.0 __ GPA __ 2.0 __ CH __ 52)\r\n{//Eligible}\r\n', '==, ||, >=, &&, <', '!=, &&, ==, &&, >=', '>=, &&, >=, &&, >=', '<=, &&, ==, ||, !=', 'c', 1),
(10, 'Below is the code sample for a tuple and an array. What is not the difference between tuples and array?\r\n\r\nlet myself1 = (1, 2, 3)\r\nlet myself2 = [1, 2, 3]\r\n', 'Tuples can store different data types but array can\'t', 'Tuples and array are list of data', 'Tuples use round brackets and array use square brackets', 'Tuple values are immutable but for array, it is mutable', 'b', 1),
(11, 'How many double quotations marks you need to use for a multiline string literal, for both start point and endpoint?', '2', '3', '4', '6', 'd', 2),
(12, 'What is the correct way to create an empty string literal?', 'Assign with a null value', 'Use an initializer syntax String()', 'Assign with a value 0', 'Just declare the variable or constant without any value', 'b', 2),
(13, 'You have an array with four letters which are “L”, “o”, “v” and “e”. Based on the incomplete code below, what is the best and correct way to merge these four letters into a String?\r\n\r\nlet loveCharacters:[Character] = [\"L\", \"o\", \"v\", \"e\"]\r\n', 'let aString = String(loveCharacters)', 'let aString += loveCharacters', 'let aString.append(loveCharacters)', 'let aString = \"L\"+\"o\"+\"v\"+\"e\"', 'a', 2),
(14, 'Based on the description and expression below, determine the correct operators for String concatenation.\r\n\r\nYou can concatenate an existing string literal with a new string literal value with __________________.\r\n', '+', '++', '+=', '==', 'c', 2),
(15, 'Does the backslash (\\) will affect the output of a multiline string literal?', 'Yes', 'No', NULL, NULL, 'b', 2),
(16, 'Consider the following code. What is the value of message after the code is executed?\r\n\r\nlet thousand = 1000\r\nlet message = \"ABC\\(thousand)DEF\"\r\n', 'thousand', '1000', '\\(thousand)', 'Compile error', 'b', 2),
(17, 'How many characters in this string?\r\n\r\nlet aString = “Make sure you are thirsty”\r\n', '21', '20', '25', '24', 'c', 2),
(18, 'Below is the code segment for String and Characters concatenation. Why does this code trigger a compile error?\r\n\r\naString.append(\"lmao yeet\")\r\n', 'You cannot append a String into Character', 'There’s missing of semicolon in this code', 'The string hasn’t been emptied before appending a String', NULL, 'a', 2),
(19, 'What is the best loop to access every individual character in a String?', 'While', 'For-In', 'Repeat-While', NULL, 'b', 2),
(20, 'Is a space considered as a Character?', 'Yes', 'No', NULL, NULL, 'a', 2),
(21, 'Based on the following If statement syntaxes, which is/are the correct syntax(s)?\r\n\r\na. if (condition) {}\r\nb. if condition {}\r\n', 'Both are correct', 'Only A is correct', 'Only B is correct', 'Both are wrong', 'a', 3),
(22, 'Based on the code below, what is the type of this statement?\r\n\r\nif conditional {\r\n     if conditional {\r\n         if conditional {\r\n             statements\r\n         }\r\n     }\r\n}\r\n', 'If statement', 'If-Else statement', 'Chained If-Else statement', 'Nested If-Else statement', 'd', 3),
(23, 'Based on the code below, what will be the output?\r\n\r\nvar score = 65\r\n\r\nif score >= 70 && score <= 100 {\r\n    print(\"A\")\r\n} else if score >= 60 && score < 70 {\r\n    print(\"B\")\r\n} else if score >= 50 && score < 60 {\r\n    print(\"C\")\r\n} else if score >= 0 && score < 50 {\r\n    print(\"F\")\r\n} else {\r\n    print(\"Invalid\")\r\n}\r\n', 'A', 'B', 'C', 'F', 'b', 3),
(24, 'What is the data type that evaluates and return conditional(s)?', 'Boolean', 'String', 'Integer', 'Floating-point numbers', 'a', 3),
(25, 'If the first conditional is evaluated with a false, will the inner if statement executes?\r\n\r\nif (condition) {\r\n     if (condition) {\r\n\r\n     }\r\n} else {\r\n     \r\n} \r\n', 'Yes', 'No', NULL, NULL, 'b', 3),
(26, 'What is the correct description for Switch statement?', 'Each case can have multiple expression.', 'Switch statements is used to evaluate condition to be true or false.', 'Switch statement only checks for integers and characters.', 'It is compulsory to have a break keyword for each case.', 'c', 3),
(27, 'Let\'s say you want to return an output \"This is a letter Z\" regardless of the letter case. Which of the following case in Switch statement is correct to execute the statement?\r\n\r\n________:\r\n     print(\"This is a letter Z\")\r\n', 'case \"z\" && case \"Z\"', 'case \"z\" || case \"Z\"', 'case \"z\",\"Z\"', NULL, 'c', 3),
(28, 'You cannot have an empty body for a case in Switch statement. True or false?', 'True', 'False', NULL, NULL, 'a', 3),
(29, 'Based on the Switch statement below, what is the output for this statement?\r\n\r\nlet someWeapons: String = \"Dark Repulser\"\r\nswitch someWeapons{\r\n     case \"Elucidator\":\r\n         print(\"Kirito first sword\")\r\n     case \"Dark Repulser\":\r\n         print(\"Kirito second sword\")\r\n     default:\r\n         print(\"This weapon does not belong to Kirito\")\r\n}\r\n', 'Kirito first sword', 'Kirito second sword', 'This weapon does not belong to Kirito', NULL, 'b', 3),
(30, 'You can check a range of integers by using interval matching.', 'Yes', 'No', NULL, NULL, 'a', 3),
(31, 'Given the following array definition below, what is the correct statement to add the color “Purple” to the end of the array?\r\n\r\nvar iPhone12Color = [\"Red\", \"Blue\", \"Green\", \"Black\", \"White\"]\r\n', 'insert(:_at:)', 'append(_:)', 'iPhone12Color[4] = “Purple”', 'remove(at:)', 'b', 4),
(32, 'Array always starts from ______.', '0', '1', '2', '3', 'a', 4),
(33, 'Given the following array definition below, what is the correct index to replace the element from “Red” to “Pink”?\r\n\r\nvar iMac = [\"Green\", \"Yellow\", \"Orange\", \"Red\", \"Purple\", \"Blue\", \"Silver\"]\r\niMac[___] = \"Pink\"\r\n', '5', '2', '4', '3', 'd', 4),
(34, 'Given the following array definition with 5 elements below, instead of using remove(at: 4) method, what is the another method to remove the same elements?\r\n\r\nvar iPadAir = [\"Green\", \"Sky Blue\", \"Rose Gold\", \"Space Gray\", \"Silver\"]\r\n', 'iPadAir.removeFirst()', 'iPadAir.removeLast()', NULL, NULL, 'b', 4),
(35, 'Based on the same code as Question 4, what is the correct statement to insert an element “Silver” after “Sky Blue”? so that the array looks like this:\r\n\r\nvar iPadAir = [\"Green\", \"Sky Blue\", \"Silver\", \"Rose Gold\", \"Space Gray\"]\r\n', 'insert(\"Silver\", at: 0)', 'insert(\"Silver\", at: 1)', 'insert(\"Silver\", at: 2)', 'insert(\"Silver\", at: 3)', 'c', 4),
(36, 'Which loop will execute the statement first, then only check the condition?', 'Repeat-While loop', 'While loop', NULL, NULL, 'a', 4),
(37, 'Which range operator includes both upper and lower boundary? ', 'Closed range operator (a…b)', 'Half-open range operator (a..<b)', NULL, NULL, 'a', 4),
(38, 'Based on the code and output below, what is the suitable stride method?\r\n\r\nfor someNum in stride(____________){\r\n    print(someNum)\r\n}\r\n\r\n// 0\r\n// 20\r\n// 40\r\n// 60\r\n// 80\r\n', 'from: 0, through: 100, by:20', 'from: 0, to: 100, by:20', NULL, NULL, 'b', 4),
(39, 'Given the following array definition below, what is the output of this element?\r\n\r\nvar iPhone12Pro = [\"Pacific Blue\", \"Graphite\", \"Gold\", \"Silver\"]\r\n\r\nprint(iPhone12Pro[2])\r\n', 'Pacific Blue', 'Graphite', 'Gold', 'Silver', 'c', 4),
(40, 'What is the correct syntax to declare an array’s type, eg: Integer?', '[Int]', 'Int[]', NULL, NULL, 'a', 4),
(41, 'Based on the code below, why will this code triggers a compile error?\r\n\r\nvar someVar: Int = nil\r\n', 'Semicolon is absent in this statement', 'Nil value is only available for String data type', 'This variable consists of keyword var', 'Nil value cannot be assigned to a non-optional constant or variable', 'd', 5),
(42, 'What is the correct symbol for an optional?', '!', '?', '[]', '()', 'b', 5),
(43, 'Based on the code below, what is the output for this variable?\r\n\r\nlet yearProduct = \"2021\"\r\nprint(Int(yearProduct))\r\n', '2021', 'Optional(2021)', 'nil', '', 'b', 5),
(44, 'Based on the code below, what is the output for this variable?\r\n\r\nlet yearProduct = \"Two Zero Two One\"\r\nprint(Int(yearProduct))\r\n', 'Two Zero Two One', 'Optional(2021)', 'nil', '', 'c', 5),
(45, 'What is the correct symbol to force unwrap an optional?', '!', '?', '[]', '()', 'a', 5),
(46, 'Based on the code below, what is the name of this way?\r\n\r\nlet yearProduct = \"2021\"\r\nprint(Int(yearProduct))\r\n\r\nif var actualYear = Int(yearProduct){\r\n    print(actualYear)\r\n}\r\n', 'Force Unwrapping', 'Optional Binding', '', '', 'b', 5),
(47, 'Based on the code in Question 6, what is the correct output for the variable?', 'nil', '2021', 'Optional(2021)', '', 'b', 5),
(48, 'Based on the code below, what are the correct name for a. and b.?\r\n\r\na.\r\nlet stringA: String? = \"Hola\"\r\nlet stringB: String = stringA!\r\n\r\nb.\r\nlet stringC: String! = \"Hola\"\r\nlet stringD: String = StringC\r\n', 'a. Optional\r\nb. Implicitly unwrapped optional\r\n', 'a. Implicitly unwrapped optional\r\nb. Optional\r\n', '', '', 'a', 5),
(49, 'You can force unwrap an implicitly unwrapped optional but not optional binding. True or False?', 'True', 'False', '', '', 'b', 5),
(50, 'Is empty String literal consider as a nil value?', 'Yes', 'No', '', '', 'b', 5),
(51, 'Based on the scenario below, choose a correct answer.\r\n\r\na. You may either declare each case line by line, or within a same line separated by commas in an enumeration.\r\nb. Enumeration supports type inference.\r\nc. To access an enumeration’s value, use a dot syntax.\r\nd. break keyword is a must.\r\n', 'a, b, c', 'a, b, d', 'b, c, d', 'a, b, c, d', 'a', 6),
(52, 'Based on the code below, is the syntax correct?\r\n\r\nenum iMacColor {\r\n     case red\r\n     case blue\r\n     case green\r\n}\r\n\r\nvar faviMacColor = iMacColor.red\r\n\r\nfaviMacColor = .green\r\n', 'Yes', 'No', NULL, NULL, 'a', 6),
(53, 'To match an individual enumeration, which statement is suitable to use?', 'If-Else statement', 'For-In loops', 'While loops', 'Switch statement', 'd', 6),
(54, 'Based on the function syntax below, what do these alphabets represent?\r\n\r\nfunc aFunction([a]) -> [b] {\r\n     [c]\r\n     return something\r\n}\r\n', 'Return Type, Statement, Parameter', 'Parameter, Return Type, Statement', 'Statement, Parameter, Statement', 'Parameter, Statement, Return Type', 'b', 6),
(55, 'What is the correct way to call a function?\r\n\r\nfunc aText(text: String) -> String {\r\n     return \"Your text is: \" + text\r\n}\r\n', 'aText(\"Hello\")', 'aText(String: \"Hello\")', 'aText(text: \"Hello\")', 'aText()', 'c', 6),
(56, 'What is the correct statement for a function without parameter?', 'This question is nonsense as parameter is always a must.', 'Round bracket is always a must.', 'Function without parameter can receive input although there is no parameter.', 'Function without parameter is always a void return type.', 'b', 6),
(57, 'Based on the code below, when this function is called, which words will be used as the parameter name?\r\n\r\nfunc student(name studentName: String){\r\n     print(studentName)\r\n}\r\n\r\nstudent(_____:\"Tim Cook\")\r\n', 'studentName', 'String', 'No need to put any word', 'name', 'd', 6),
(58, 'What is the return type for functions with more than one return values?', 'Boolean', 'Tuples', 'Array', 'Dictionary', 'b', 6),
(59, 'Based on the code below, which statemement is correct?\r\n\r\na.\r\nfunc oneFunc() {\r\n\r\n}\r\n\r\nb.\r\nfunc twoFunc() -> Void {\r\n\r\n}\r\n', 'Both a and b are correct', 'Only a is correct', 'Only b is correct', 'Both a and b are wrong', 'a', 6),
(60, 'What is the incorrect statement for a closure?', 'Closure is like a function without function name and keyword.', 'The keyword of the closure is “in”.', 'Parameter of the closure is outside of braces.', 'Closures helps to simplify the overall process.', 'c', 6),
(61, 'What makes dictionary different from array?', 'Dictionary cannot duplicate the value but array can.', 'Dictionary doesn’t matter the ordering of items but array does.', 'Array element can be accessed via key dictionary can be accessed via index.', 'You can have multiple data type for value in dictionary but not in array.', 'b', 7),
(62, 'Key data type must be same as the value data type. True or false?', 'True', 'False', NULL, NULL, 'b', 7),
(63, 'Based on the code below, what is the data type for key and value?\r\n\r\nvar someDict: [0.3:\"Low\", 0.5: \"Medium\", 0.7:\"High\"]\r\n', '[Double:String]', '[Integer:Character]', '[Double:Integer]', '[Integer:String]', 'a', 7),
(64, 'Based on the code in Question 3, how many pairs of items in this dictionary?', '2', '3', '6', '7', 'b', 7),
(65, 'What is the correct way to add a new item into a dictionary?', 'Use insert(_:at:) method to add', 'Use an addition assignment operator to add (+=)', 'Use a subscript syntax to add', NULL, 'c', 7),
(66, 'Based on the code below, what is the value from the retrieved key?\r\n\r\nvar appleSilicon = [\"APL1102\":\"M1\", \r\n\"APL1W01\":\"A14 Bionic\", \r\n\"APL1W85\":\"A13 Bionic\",\r\n\"APL1083\":\"A12Z Bionic\", \r\n\"APL1W81\":\"A12 Bionic\"]\r\n\r\nprint(appleSilicon[\"APL1W85\"]!)\r\n', 'M1', 'A12Z Bionic', 'A12 Bionic', 'A13 Bionic', 'd', 7),
(67, 'What is the correct way to remove an item from a dictionary?', 'Use remove(at:) method', 'Use subtraction assignment operator (-=) ', 'Assign the key with a nil value', 'Use removeFirst() method', 'c', 7),
(68, 'You cannot add a new value into a tuple but you can do so in an array or dictionary. True or False?', 'True', 'False', NULL, NULL, 'a', 7),
(69, 'What is the correct way to make a dictionary become empty again?', 'Use an initializer syntax.', 'Assigning an empty dictionary literal ([:])', 'Use removeAll(where:) method', NULL, 'b', 7),
(70, 'Based on the code below, what is the correct code segment to list out all the values from dictionary?\r\n\r\nvar iOSAnnounce = [\"2020\":\"iOS 14\", \r\n\"2019\":\"iOS 13\", \r\n\"2018\":\"iOS 12\",\r\n\"2017\":\"iOS 11\", \r\n\"2016\":\"iOS 10\",]\r\n\r\nfor ______ in iOSAnnounce{\r\n    print(name)\r\n}\r\n', 'name', '(name)', 'year, name', '(year, name)', 'd', 7),
(71, 'What is the file format for each class in Swift?', '.swift', '.ipa', '.m', '.exe', 'a', 8),
(72, 'Based on the code segment below, what are correct name for the labelled parts in the class?\r\n\r\nclass aClass{\r\n     var aThing: String [a]\r\n\r\n     init(aThing:String) { [b]\r\n          self.aThing = aThing\r\n     }\r\n      func anotherThing() { [c]\r\n          //Some code here\r\n     }\r\n}\r\n', 'Variable, initializer, function', 'Variable, initializer, method', 'Property, initializer, function', 'Property, initializer, method', 'd', 8),
(73, 'Let say you have a class named “School” with a default initializer. What is the correct way to create a new instance in Swift?', 'var school = new School()', 'var school = School()', 'var school: School', 'School school = new School()', 'b', 8),
(74, 'Based on the code below, which description is correct for value type?\r\n\r\nstruct Distance: Equatable{\r\n     var miles:Double\r\n}\r\nvar distance1 = Distance(miles:100)\r\nvar distance2 = distance1\r\ndistance2.miles = 300.00\r\nprint(distance1)\r\nprint(distance2)\r\n', 'The value of distance2 will not affect the value of distance1.', 'Instances with value type will point to the same address.', 'Class is also a value type.', 'All basic data types except String are value types.', 'a', 8),
(75, 'Which keyword should be used if the parameter name for the initializer is same as the property name in the class?', 'let', 'self', 'this', 'var', 'b', 8),
(76, 'Do you have to set an initializer in your class manually, although all of your properties are assigned with default value?', 'Not necessary, as a default initializer will provide automatically.', 'Necessary, else you are unable to create an instance.', NULL, NULL, 'a', 8),
(77, 'Based on the following scenario, choose the correct combination for the property.\r\n\r\na. Getter is compulsory whereas setter is an optional.\r\nb. Stored properties are provided only by classes and structures.\r\nc. You can use a dot syntax to access a class’ type property directly.\r\nd. Both constant and variable can be the property.\r\n', 'a, b, c', 'a, b, d', 'a, c, d', 'a, b, c, d', 'd', 8),
(78, 'Let say you have three classes which are Human, Man and Boy. Man is the subclass of Human, whereas Boy is the subclass of Man. Human has a method called sleep(). When an instance of Boy is created, can this instance access to the sleep() method?', 'Can', 'Cannot', NULL, NULL, 'a', 8),
(79, 'Based on Question 8, you add a specific keyword to provide custom implementation of the method sleep() in your Man class and Boy class respectively. Which version of sleep() method will be executed for your created instance?', 'Man', 'Human', 'Boy', NULL, 'c', 8),
(80, 'How many deinitializer can be exist in each class?', '0', '1', '2', '3', 'b', 8);

-- --------------------------------------------------------

--
-- Table structure for table `students`
--

DROP TABLE IF EXISTS `students`;
CREATE TABLE IF NOT EXISTS `students` (
  `studentID` int(11) NOT NULL,
  `studentName` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `isOnboard` tinyint(1) NOT NULL,
  PRIMARY KEY (`studentID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `students`
--

INSERT INTO `students` (`studentID`, `studentName`, `email`, `password`, `isOnboard`) VALUES
(1000000, 'Dummy Student', 'lyeboonjet@gmail.com', '$2y$10$a3s6wy1fWYJe9hQJkrev.eFp5HfuAtQMquOK5fPDIGX5m/9O9ddVG', 1),
(1100000, 'Steve Jobs', 'jetlye2804@gmail.com', '$2y$12$leaQnPiiEW/e8pBsQntVp.c9aPaiXX0A.qe4SJszkz.qqJWURyiRy', 1);

-- --------------------------------------------------------

--
-- Table structure for table `topicsections`
--

DROP TABLE IF EXISTS `topicsections`;
CREATE TABLE IF NOT EXISTS `topicsections` (
  `sectionID` int(11) NOT NULL AUTO_INCREMENT,
  `sectionName` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `editorLink` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `sectionText1` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `sectionCode1` text COLLATE utf8mb4_unicode_ci,
  `sectionText2` text COLLATE utf8mb4_unicode_ci,
  `sectionCode2` text COLLATE utf8mb4_unicode_ci,
  `sectionText3` text COLLATE utf8mb4_unicode_ci,
  `sectionCode3` text COLLATE utf8mb4_unicode_ci,
  `sectionText4` text COLLATE utf8mb4_unicode_ci,
  `sectionCode4` text COLLATE utf8mb4_unicode_ci,
  `topicID` int(11) NOT NULL,
  PRIMARY KEY (`sectionID`),
  KEY `topicIDSection` (`topicID`)
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `topicsections`
--

INSERT INTO `topicsections` (`sectionID`, `sectionName`, `editorLink`, `sectionText1`, `sectionCode1`, `sectionText2`, `sectionCode2`, `sectionText3`, `sectionCode3`, `sectionText4`, `sectionCode4`, `topicID`) VALUES
(1, 'Constant and Variables', 'https://paiza.io/projects/e/jNBVCodrTWhXH7gQUnzrlw?theme=chrome', 'Constants and variables are associated with a name, a name and a particular type. In Swift, you MUST delcare a contant or a variable before you are using it. Once you declare a constant, its value CANNOT be modified, but you can do so in a variable.\r\nYou can declare a constant by using a let keyword. For variable, use var to declare it.\r\n', 'let probationMaxCreditHour = 12\r\nvar obtainedCreditHour = 4\r\n\r\nprobationMaxCreditHour = 14 // Will return compile error\r\nobtainedCreditHour = 6 // This variable is now become 6', 'If you want to declare multiple constants or multiple variables at the same time, yes, you may do so. Just declare them on a single line.', 'var tanjiro = 11, nezuko = 12, zenitsu = 13', 'You may also declare your variables with unicode such as symbols, emojis and CJK (Chinese, Korean, Korean) Characters.', 'let 😂 = \"tearsofjoy\" // Emoji\r\nlet ☯ = \"yinyang\" // Symbol\r\nlet スターバースト・ストリーム = \"星爆氣流斬\" // CJK Characters\r\n', 'You may also print out the value of a constant or a variable by using print() function.', 'print(tanjiro) //prints 11', 1),
(2, 'Semicolon and Comments', NULL, 'Unlike Java, C++ and C#, Swift DOESN\'T require a semicolon (;) at the end of each code line, unless there are multiples statementss are written on a same line, then you have to use a semicolon to separate each statement.', 'var demonSlayer = \"kimetsuNoYaiba\" //need not have a semicolon\r\nvar anime = \"Date or Alive\"; print(anime) //need a semicolon', 'Comments in Swift are similiar to C++ and Java. You can write a comment by using a single line (//).\r\nIf you want to write multiple line comments, you may start with a forward-slash followed by an asterisk (/*) and ends with an asterisk followed by a forward-slash (*/).', '// A single line comment.\r\n/*\r\nA multiline comment.\r\n*/', NULL, NULL, NULL, NULL, 1),
(3, 'Type Annotations, Type Safety and Type Inference', NULL, 'It is not necessary to have a type annotation for a constant or a variable if you had already assigned it with an initial value. This is because Swift supports type inference by automatically infers the data type based on the assigned value.\r\nTake note that for interring floating-point numbers type, Swift will always choose Double rather than float.', 'let myName = \"Muzan\" // myName is inferred to String type\r\nlet myAge = 1000 // myAge is inferred to Int type\r\nlet myCGPA = 3.9487 // myCGPA is inferred to Double type', 'However, you are encouraged to put a type annotation for each constant and variable, so that you won\'t confused with the assigned data type of the particular constant or variable. To do so, just put a colon (:) after the constant or variable name, followed by a space and the data type name. You may also assign a value to a type annotated variable or constant.', 'var myUniversity: String = \"UTAR\"', 'Swift is a type-safe language that encourages you to be clear about the value types your code can work with, so that you won\'t accidentally assign a value with wrong data type.\r\nYou can use type(of:) to check the annotated type of the constant or variable.', 'print(type(of:myUniversity)) // return type String', NULL, NULL, 1),
(4, 'Numeric Type Conversion', 'https://paiza.io/projects/e/PY7B2OCE1A5Horyjn-DyyA?theme=chrome', 'You can convert an integer to a floating-point number and vice versa. However, you MUST made the numeric constant or variable explicit! Explicit means you had type annotated a constant or a variable. Please take note that if you convert a floating-point number into an integer, it will be truncated (totally obsolete all the decimal numbers).', 'let six = 6 //This is an integer\r\nlet fourPointEightSevenSixThree = 4.8763 //This is a floating-point number\r\nlet newNumber = Double(six) + fourPointEightSevenSixThree\r\n// newNumber is inferred to be Double type, and its new value is 10.8763\r\n\r\nlet newerNumber = Int(newNumber)\r\n// newerNumber is inferred to be Int type, and its new value is 10.', 'You may round off a floating-point value into an integer by using a round() function.', 'newerNumber = round(newNumber)\r\n// newerNumber is rounded into 11.', NULL, NULL, NULL, NULL, 1),
(5, 'Assignment Operators', NULL, 'Assignment operators are used to initialize or modify a variable with a value, or initialize a constant with a value. The symbol of assignment operators is =.', 'let abc = 10 // constant abc is now equal to 10\r\nvar def = abc // variable def is noe equal to 10', NULL, NULL, NULL, NULL, NULL, NULL, 1),
(6, 'Arithmetic Operators', NULL, 'Swift provides four standard arithmetic operators and one remainder operator for all number types, which are:\r\n\r\nAddition (+)\r\nSubtraction -\r\nMultiplication (*)\r\nDivision (/)\r\nRemainder (%)', 'a = 10 + 6 // a equals 16\r\nb = 8 - 3 // b equals 5\r\nc = 5 * 9 // c equals 45\r\nd = 36 / 4 // d equals 9\r\ne = 7 % 5 // e equals 2', 'You can also combine an arithmetic operator with an assignment operator, to become a compound assignment operator.', 'var num1 = 9\r\nnum += 3\r\n// num1 is equal to 12, similiar as num1 = num1 + 3', NULL, NULL, NULL, NULL, 1),
(7, 'Comparison Operators', NULL, 'Swift provides six standard comparison operators, which are:\r\n\r\nEqual to (==)\r\nNot equal to !=\r\nGreater than (>)\r\nLess than (<)\r\nGreater than or equal to (>= or ≥)\r\nLess than or equal to (=< or ≤)\r\nThe purpose of comparison operators is to compare two variables or constants in a statement. Each comparison operators returns a Boolean value to check the statement is true or false. Therefore, comparison operators are usually used in conditional statements.\r\n', '1 == 1 // true, as 1 is equal to 1\r\n3 != 9 // true, as 3 isn\'t equal to 9\r\n3 > 2 // true, as 3 is greater than 2\r\n4 < 8 // true, as 4 is less than 8\r\n1 >= 1 // true, as 1 is greater than or equal to 1\r\n4 <= 2 // false, as 2 isn\'t less than or equal to 4\r\n', NULL, NULL, NULL, NULL, NULL, NULL, 1),
(8, 'Logical Operators', NULL, 'Logical operators are used to make modification or combine the Boolean logic values true and false. They usually exist in conditional statement too.\r\nSwift provides three standard logical operators, which are:\r\n\r\nLogical AND (&&)\r\nLogical OR (||)\r\nLogical NOT (!)\r\nIf you use a logical AND operator for two values, both values must be true to retrieve a true expression. If either one of the values is false, your expressions will be false.\r\nHowever, if you use a logical OR operator for two values, only one of the values is needed to be true to retrieve a true expressions, the another value can be either true or false. Only if both of your value are false, your expressions will be false.\r\nA logical NOT operator inverts the Boolean value, from true becomes false and vice versa.\r\n', 'let naruto = true\r\nlet sasuke = false\r\n\r\nif (naruto && sasuke){...} // this expression is false\r\nif (naruto || sasuke){...} // this expression is true\r\nif (!sasuke){...} // this expression is true\r\n', 'You may also combine multiple logical operators.', 'let sakura = true\r\nlet hinata = false\r\n\r\nif (naruto || sasuke && hinata || sakura){...}\r\n// this expression is true\r\n', NULL, NULL, NULL, NULL, 1),
(9, 'Tuples', NULL, 'Tuples group multiple values into single compound value. Your tuple value\'s data type can be any type, so you don\'t have to be of the same type as each other. To do so, use a parenthesis to group all the values, and separate them with a comma, becomes (a, b, c, d).', 'let vocaloidData = (\"Hatsune Miku\", \"2007\")\r\n// vocaloidData is of type (String, Int), and equals (\"Hatsune Miku\", \"2007\")\r\n', 'You can decompose all the values in the tuple into individual constants or variable to access them.', 'let (vocaloidName, debutYear) = vocaloidData\r\nprint(\"\\(vocaloidName) is a virtual singer that debuts in \\(debutYear)\")\r\n// prints \"Hatsune Miku is a virtual singer that debuts in 2007\"', 'If you want to avoid any confusion when defining a tuple, you can name each individual elements in the tuple, and access their values as properties.', 'let vocaloidNewData = (vocaloidName: \"Kagamine Rin\", debutYear: \"2007\", famousSong: \"Meltdown\")\r\nprint(\"\\(vocaloidNewData.vocaloidName) is a virtual singer that debuts in \\(vocaloidNewData.debutYear). Her famous song is \\(vocaloidNewData.famousSong).\")\r\n// prints \"Kagamine Rin is a virtual singer that debuts in 2007. Her famous song is Meltdown.\"\r\n', NULL, NULL, 1),
(10, 'Introduction of String', NULL, 'A string literal is a sequence of characters surrounded by double quotation marks (\").', 'let aString = \"Hello from the other side\"', 'You may use three double quotation marks (\"\"\") to make a multiline string literal. You may also use a backslash (\\) to make a line break (Does not affect the output, it just helps you to make the source code more readable).', 'let badGuyLyrics = \"\"\"\r\nSo you\'re a tough guy \\\r\nLike it really rough guy \\\r\nJust can\'t get enough guy \\\r\nChest always so puffed guy \\\r\n\"\"\"', NULL, NULL, NULL, NULL, 2),
(11, 'Empty String Initialization', NULL, 'You may assign an empty string literal to a variable or use String() to create an empty string. If you want to check whether a String value is empty, you may use an initializer syntax of a new String instance (isEmpty) property that return Boolean values.', 'var emptyString1 = \"\" // empty string literal\r\nvar emptyString2 = String() // initializer syntax\r\n\r\nif (emptyString1.isEmpty) {\r\n     print(\"This string is empty\");\r\n} else {\r\n     print(\"This string is not empty\");\r\n}\r\n// prints \"This string is empty.\"\r\n', NULL, NULL, NULL, NULL, NULL, NULL, 2),
(12, 'Working with Characters', NULL, 'As string literal is made up of lots of characters, therefore you can access the individual character values in that string literal by using a for-in loop to iterate it.', 'for character in \"Swift\" {\r\n     print(character)\r\n}\r\n// S\r\n// w\r\n// i\r\n// f\r\n// t\r\n', 'You may also use an array of many character values to form a new String by passing them into a String initializer.', 'let javaCharacters: [Character] = [\"J\", \"a\", \"v\", \"a\"]\r\nlet javaString = String(javaCharacters)\r\nprint(javaString) // Prints \"Java\"\r\n', NULL, NULL, NULL, NULL, 2),
(13, 'String and Characters Concatenation', NULL, 'You can concatenate two string into a new string literal value (combine/add together) by using an additional operator (+). You can also concatenate an existing string literal with a new string literal value with an addition assignment operator (+=).', 'let string1 = \"UTAR\"\r\nlet string2 = \" my choice\"\r\nvar newString = string1 + string2 // newString equals \"UTAR my choice\"\r\n\r\nvar string3 = \"I study in \"\r\nstring3 += string1\r\n// string3 now equals \"I study in UTAR\"\r\n', 'If you want to add a Character value into a string literal, just append it with an append() method.', 'string3.append(\".\")\r\n// string3 now equals \"I study in UTAR.\"', 'Note\r\nYou can add a Character into a String but you cannot append a String into a Character as each Character value MUST contain a single character only.', NULL, NULL, NULL, 2),
(14, 'String Interpolation', NULL, 'If you want to make a constant or a variable to become a placeholder in a String, you just need to use \\() to wrap the variable or constant within the String.', 'let zenitsuAge = 13\r\nprint(\"Zenitsu is \\(zenitsuAge) years old.\")\r\n// prints \"Zenitsu is 13 years old.\"\r\n', NULL, NULL, NULL, NULL, NULL, NULL, 2),
(15, 'Counting Characters', NULL, 'You can use a count property to count the number of characters in a string. Space are counted as a character too.', 'let femaleArtist = \"Billie Eilish\"\r\nprint(\"Billie Eilish has \\(femaleArtist.count) characters.\")\r\n// prints \"\"Billie Eilish has 13 characters.\"\"', NULL, NULL, NULL, NULL, NULL, NULL, 2),
(16, 'Introduction of Conditional Statements', NULL, 'We always make different decisions based on the conditions and situations in real world, something like \"If today is a sunny day, I will take my lunch in McDonalds. Else, I will go to KFC for lunch.\"\r\nThe computer programs also perform the same way. Usually, the computer will execute different pieces of code segments based on certain conditions. Similar to lots of programming languages, Swift provides if and switch conditional statements are for programmers to make conditional branches.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 3),
(17, 'If and If-Else Statements', NULL, 'In if statement, you just need to put an if keyword at first, then the condition(s), and lastly, a brace with statements. You may also put the condition(s) in a round bracket.\r\nif condition {statements} or if (condition) {statements}\r\n\r\nBased on the code below, if the condition is true, all of the statements for that particular condition will be executed. Otherwise, no codes will be executed.\r\n', 'var tanjiroAge = 15\r\n// tanjiroAge >= 13 is a condition\r\nif tanjiroAge >= 13 {\r\n     print(\"Tanjiro is a teenager.\")\r\n     // statements\r\n} // prints \"Tanjiro is a teenager.\"\r\n', 'What if we want to see other results for another conditions? We may use else to do so. If the first condition is false, the Swift compiler will check the second condition.\r\n\r\nBased on the code below, we have two conditions and one statement for each condition. if the first condition is true, all of the statements for the first condition will be executed. Otherwise, all of the statements for the second condition will be executed.\r\n', 'var shigeruAge = 8\r\nif shigeruAge >= 13 {\r\n     print(\"Shigeru is a teenager.\")\r\n} else {\r\n     print(\"Shigeru is a child.\")\r\n}\r\n// prints \"Shigeru is a child.\"\r\n', 'But what if we have more than two conditions? We may chain multiple if statements for that. This is called \"Chained If-Else statements\".', 'var nezukoAge = 14\r\nif nezukoAge >= 18 {\r\n     print(\"Nezuko is an adult.\")\r\n} else if nezukoAge >= 13 && nezukoAge < 18 {\r\n     print(\"Nezuko is a teenager.\")\r\n} else {\r\n     print(\"Nezuko is a child.\")\r\n}\r\n// prints \"Nezuko is a teenager.\"\r\n', 'Sometimes we need an If or If-Else statement inside an If or If-Else statement. Fortunately, Swift allows us to do so. This is called \"nested conditional statements\".', 'if conditional {\r\n     if conditional {\r\n         if conditional {\r\n             statements\r\n         }\r\n     }\r\n}\r\n', 3),
(18, 'Switch Statements', NULL, 'Switch statements are also used for conditional statement frequently. In switch statement, it consists of a switch keyword at first, multiple cases with assigned value(s), statement(s) responds to that particular case, and a default case with a statement at last.\r\nEvery switch statement must be exhaustive. That is, every possible value of the type being considered must be matched by one of the switch cases. If it’s not appropriate to provide a case for every possible value, you can define a default case to cover any values that are not addressed explicitly, similar to the else in an If-Else statement.\r\n', 'let someDemon: String = \"Tamayo\"\r\nswitch someDemon{\r\n     case \"Muzan\":\r\n         print(\"The demon king, Kibutsuji Muzan.\")\r\n     case \"Nezuko\":\r\n         print(\"A special demon does not eat humans.\")\r\n     case \"Tamayo\":\r\n         print(\"A hero demon, also a doctor.\")\r\n     default:\r\n         print(\"Other demons.\")\r\n}\r\n// prints \"A hero demon, also a doctor\".\r\n', 'No Implicit Fallthrough\r\n\r\nUnlike Objective-C and C switch statement in Swift does not require an explicit break statement (although you may use it). This is because it doesn’t fall through the bottom of each case and into the next one by default. Instead, the entire switch statement finishes its execution as soon as the first matching switch case is completed.\r\nHowever, each case MUST contain at least one executable statement. If the case doesn\'t contain any executable statement, it will report a compile-time error.\r\n', 'let anotherCharacter: Character = \"a\"\r\nswitch anotherCharacter {\r\ncase \"a\": // Invalid, the case has an empty body\r\ncase \"A\":\r\n     print(\"The letter A\")\r\ndefault:\r\n     print(\"Not the letter A\")\r\n}\r\n// this will report a compile-time error.\r\n', 'This is because Swift\'s switch statement doesn\'t match both \"a\" and \"A\", unlike C or Objective-C.\r\nTherefore, you may combine two values into a single compound case, with commas to separate the values. The commas represents || in an If-Else statement.\r\n', 'let anotherCharacter: Character = \"a\"\r\nswitch anotherCharacter {\r\ncase \"a\", \"A\":\r\n     print(\"The letter A\")\r\ndefault:\r\n     print(\"Not the letter A\")\r\n}\r\n// prints \"The letter A\"\r\n', 'Interval Matching\r\nValues in switch cases can be checked for their inclusion in an interval. This example uses number intervals to provide a natural-language count for numbers of any size:\r\n', 'let approximateCount = 62\r\nlet countedThings = \"moons orbiting Saturn\"\r\nlet naturalCount: String\r\nswitch approximateCount {\r\ncase 0:\r\n     naturalCount = \"no\"\r\ncase 1..<5:\r\n     naturalCount = \"a few\"\r\ncase 5..<12:\r\n     naturalCount = \"several\"\r\ncase 12..<100:\r\n     naturalCount = \"dozens of\"\r\ncase 100..<1000:\r\n     naturalCount = \"hundreds of\"\r\ndefault:\r\n     naturalCount = \"many\"\r\n}\r\nprint(\"There are \\(naturalCount) \\(countedThings).\")\r\n// prints \"There are dozens of moons orbiting Saturn.\"\r\n', 3),
(19, 'Introduction of Arrays', NULL, 'Imagine a teacher want to use a program to store 50 students’ English test score from the same class. You are a programmer and what kind of method you will use to make the program to handles all 50 records?\r\nYou might say: “Well, I just declare 50 variables with the same data type, and each variable handles a student’s test score.” Although it is logical make sense, but do you have to do so that might make your program become too redundant?\r\nTherefore, you may use a collection type which is an array to store record with same data type in an ordered list. In Swift, the array is written in Array<Element>, but you can just write in short form which is [Element]. Element represents the data type of the array.\r\n', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 4),
(20, 'Create an Array', NULL, 'Similar to what you have learned in Topic 2, you may use an initializer syntax to create an empty array with a certain array type. Also, if you want to check whether an array is empty, you may use isEmpty property that return Boolean values.', 'var testScoreArr = [Int]() // initializer syntax\r\n\r\nif (testScoreArr.isEmpty) {\r\n     print(\"This array is empty\");\r\n} else {\r\n     print(\"This array is not empty\");\r\n}\r\n// prints \"This array is empty.\"\r\n', 'If you want to create an array with element(s), you may initialize it with an array literal. An array literal consists of at least one element, and it is written as a list of values, separated by commas, surrounded by a pair of square brackets: [value 1, value 2, value 3].', 'var testScoreArr: [Int] = [98, 100, 84, 56] // this array has been initialized with 4 elements.', 'Array in Swift also supports type inference, therefore you may create an array straightforward without writing the type of the array, if you have initialized with same type elements.', 'var englishScoreArr = [100, 95, 98, 90] // this array is inferred to Int type', 'You may also create a new array by using addition operator (+) to add two existing arrays with the compatible type.', 'var iOSProducts = [\"iPhone\", \"iPad\", \"iPod touch\"]\r\nvar macOSProducts = [\"iMac\", \"MacBook Air\", \"MacBook Pro\"]\r\n\r\nvar appleProducts = iOSProducts + macOSProducts\r\n// appleProducts contains [\"iPhone\", \"iPad\", \"iPod touch\", \"iMac\", \"MacBook Air\", \"MacBook Pro\"]\r\n', 4),
(21, 'Append, Access and Count Elements', NULL, 'You may add a new item into an array by using append(_:) method, or an addition assignment += operator for multiple new items. The added item(s) will be existing in the end of the array. Make sure the item(s) you want to add has the same type as the array.', 'appleProducts.append(\"AirPods\") // using append(_:) method to add a new item\r\n// appleProducts contains [\"iPhone\", \"iPad\", \"iPod touch\", \"iMac\", \"MacBook Air\", \"MacBook Pro\", \"AirPods\"]\r\n\r\nappleProducts += [\"Apple Watch\", \"HomePod mini\"] // using += to add multiple new items\r\n// appleProducts contains [\"iPhone\", \"iPad\", \"iPod touch\", \"iMac\", \"MacBook Air\", \"MacBook Pro\", \"AirPods\", \"Apple Watch\", \"HomePod mini\"]\r\n', 'If you want to access an element in an array, you may use a subscript syntax to pass the index of the value you want to retrieve within square brackets immediately after the name of the array.', 'var firstItem = appleProducts[0] // firstItem contains \"iPhone\"', 'Note\r\nArray starts from 0 instead from 1. Means that the first element is 0 and the second element is 1.\r\n', 'appleProducts[8] // valid, as this array has 9th element\r\nappleProducts[9] // invalid, as this array does not have 10th element\r\n', 'To find out the total number of items in an array, you may use a count property. This property is read-only.', 'print(appleProducts.count) // Prints 9', 4),
(22, 'Modify, Insert and Delete Elements', NULL, 'You can use subscript syntax to change an existing value at a given index, or a range of existing values at once.', 'appleProducts = [\"iPhone\", \"iPad\", \"iPod touch\", \"iMac\", \"MacBook Air\", \"MacBook Pro\", \"AirPods\", \"Apple Watch\", \"HomePod mini\"]\r\n\r\nappleProducts[3] = \"iMac Pro\" // fourth item changed from \"iMac\" to \"iMac Pro\"\r\n\r\nappleProducts[4...6] = [\"Mac mini\", \"Mac Pro\", \"AirPods Pro\"]\r\n// appleProducts now contains [\"iPhone\", \"iPad\", \"iPod touch\", \"iMac Pro\", \"Mac mini\", \"Mac Pro\", \"AirPods Pro\", \"Apple Watch\", \"HomePod mini\"]\r\n', 'If you don\'t want your new elements exist in the end of an array, you may use insert(:_at:) method to insert a new element in any position of the array. Based on the code below, the new element is inserted in the third position of the array, and all elements after the inserted element will be moved backward.', 'appleProducts.insert(\"iPad Pro\", at: 2)\r\n// appleProducts now contains [\"iPhone\", \"iPad\", \"iPad Pro\", \"iPod touch\", \"iMac Pro\", \"Mac mini\", \"Mac Pro\", \"AirPods Pro\", \"Apple Watch\", \"HomePod mini\"]\r\n', 'You may remove an element from an array by using remove(at:) method. Based on the code below, the fifth element from the array is removed, and all elements after the removed element will be moved forward.', 'appleProducts.remove(at: 4)\r\n\r\nappleProducts now contains [\"iPhone\", \"iPad\", \"iPad Pro\", \"iPod touch\", \"Mac mini\", \"Mac Pro\", \"AirPods Pro\", \"Apple Watch\", \"HomePod mini\"]\r\n', 'If you want to remove the first or last element, instead of using specific index, you may just use removeFirst() method or removeLast() method to do so.', 'appleProducts.removefirst()\r\n//appleProducts now contains [\"iPad\", \"iPad Pro\", \"iPod touch\", \"iMac Pro\", \"Mac mini\", \"Mac Pro\", \"AirPods Pro\", \"Apple Watch\", \"HomePod mini\"]\r\n\r\nappleProducts.removeLast()\r\n//appleProducts now contains [\"iPad\", \"iPad Pro\", \"iPod touch\", \"iMac Pro\", \"Mac mini\", \"Mac Pro\", \"AirPods Pro\", \"Apple Watch\"]\r\n', 4),
(23, 'Introduction of Loops', NULL, 'Now, imagine back the teacher has stored all 50 student\'s English test scores from the same class into the program, and he/she wants to show all of the 50 test scores to the display. Which means the program has to print all elements from the array. But how?\r\nInstead of using a dumb way such as print(element[0]), print(element[1]), you can use a loop to iterate and print out all the records at once. Loops will keep continue to run and run and run, until it reached a condition to stop the iteration. In Swift, there are three types of loops which are For-In loops, While loops and Repeat-While loops.\r\n', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 4),
(24, 'For-In Loops', NULL, 'In for-in loops, you just need to put a for keyword at first, then a variable for the for-in loops, then an in keyword and the array you want to be used in the for-loop, and lastly, a brace with statements.\r\n\r\nfor variable in array {statements}\r\n\r\nBased on the code below, the for-in loop will repeatly print all the elements from the array, until there\'s no further elements exist in the array. It is similiar to the Java or C++ syntax which is for (i<0; i<brands.count; i++).\r\n\r\nYou may also use a for-in loop for a String. Please refer back to Topic 2.\r\n', 'let brands = [\"Apple\", \"Samsung\", \"Huawei\", \"Oppo\", \"Xiaomi\"]\r\n\r\nfor brand in brands{\r\n     print(\"product\")\r\n}\r\n// Apple\r\n// Samsung\r\n// Huawei\r\n// Oppo\r\n// Xiaomi\r\n', 'You can also use for-in loops with numeric ranges. There are two types of numeric range operator which are closed range operator (...) and half-open range operator (..<).\r\n\r\nClosed range operator (a...b) defines a range that runs from a to b, and includes both values a and b.\r\nWhereas for half-open range operator (a..<b), it also defines a range that runs from a to b, but does not include the values of b. Therefore, half-open range operator are suitable for array counting.\r\n\r\nRemember that for both range operator, the value of a must not be greater than b.\r\n', 'for index in 1...4{\r\n     print(index)\r\n} // closed range operator\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n\r\nfor index in 1..<4{\r\n     print(index)\r\n} // half-open range operator\r\n// 1\r\n// 2\r\n// 3\r\n', 'If you do not need each value from a sequence, you can ignore the values by using an underscore in place of a variable name.', 'let base = 3\r\nlet power = 10\r\nvar answer = 1\r\nfor _ in 1...power {\r\n     answer *= base\r\n}\r\nprint(\"\\(base) to the power of \\(power) is \\(answer)\")\r\n// Prints \"3 to the power of 10 is 59049\"\r\n', 'If you want to skip numbers in the range, you may use stride method to do so. There are two types of stride method which are stride(from:through:by:) and stride(from:to:by:).\r\n\r\nMethod stride(from:through:by:) will skip numbers inclusively, which include the upper bound of the range. Whereas method stride(from:to:by:) will skip numbers exclusively, which exclude the upper bound of the range.\r\n', 'for yeet in stride(from: 0, through: 40, by: 10){\r\n     print(yeet)\r\n}\r\n// 0\r\n// 10\r\n// 20\r\n// 30\r\n// 40\r\n// Include the upper bound\r\n\r\nfor yeet in stride(from: 0, to: 40, by: 10){\r\n     print(yeet)\r\n}\r\n// 0\r\n// 10\r\n// 20\r\n// 30\r\n// Exclude the upper bound\r\n', 4),
(25, 'While Loop and Repeat-While Loop', NULL, 'In while loops, you just need to put a while keyword at first, then a condition, and lastly, a brace with statements. Similar to If-Else statement in Topic 3, You may also put the condition(s) in a round bracket.', 'while you.isAlive {\r\n     // do something\r\n}\r\n', 'For repeat-while loops, you put a repeat keyword at first, then a brace with statements, and lastly, a keyword while and statements. You may also put the condition(s) in a round bracket.', 'repeat {\r\n     // do something\r\n} while you.isAlive\r\n', 'The difference between a while loop and a repeat-while loop is, while loop will check the condition first, then only execute the statement. Whereas repeat-while loop will execute the statement first, then only check the condition.', NULL, NULL, NULL, 4),
(26, 'Optionals', NULL, 'In some situations, a variable’s value may be absent as we might not know what is the actual value is. But sometimes, absent value is dangerous for a program as it may cause serious bugs occur that make the whole application or system crashed. Fortunately, Swift provides a modern feature to handle a valueless variable, which is called optionals.\r\n\r\nAn optional represents two possibilities for a variable: Either it is valued or valueless. To declare an optional, you just need to put a question mark (?) after the data tyle, such as Int? and Double?.\r\n\r\nIf you want to declare a valueless variable, you just need to assign the variable with a special value “nil”. \r\n', 'var serverResponseCode: Int? = 404\r\n// serverResponseCode contains an actual Int value of 404\r\n\r\nserverResponseCode = nil\r\n// serverResponseCode now contains no value\r\n', 'Let say you want to convert a String value into Int value, such as “69” and “six nine”, but not every string can be converted into integer. For example, “69” can be converted but “six nine” can’t.\r\n\r\nBecause the conversion might fail, the result returned is type optional Int, rather than Int. You can use the type function to see the type of a variable:\r\n', 'let snitch = \"69\"\r\nlet stillASnitch = Int(snitch)\r\n\r\nprint(type(of: stillASnitch))\r\n// Optional<Int>\r\nprint(stillASnitch)\r\n// Optional(69)\r\n', 'Remember that you can’t use nil with non-optional constant or variable. If you want to do so, just define an optional variable without assign it with a default value, Swift will automatically set the optional variable to nil.', 'var mumbleRapper: String?\r\n// mumbleRapper is automatically set to nil\r\n', NULL, NULL, 5),
(27, 'Force Unwrapping and Optional Binding', NULL, 'To check whether an optional constant or variable is valued or valueless, use an if or if-else statement to compare against nil. If an optional is valued, it is considered to be “not equal” to nil. \r\n\r\nOnce you are sure that the optional is valued, you can access its underlying value by adding exclamation mark (!) to the end of the optional’s name. Something like: “Dear master, this optional is valued so please use it.”\r\n', 'if stillASnitch != nil{\r\n     let unwrappedSnitch = stillASnitch! // force unwrapping\r\n     print(\"This optional variable is valued which is \\(unwrappedSnitch)\")\r\n} else {\r\n     print(\"This optional variable is valueless\")\r\n}\r\n// This optional variable is valued which is 69\r\n', 'There’s an alternative way to check whether an optional constant or variable is valued or valueless, which is using optional binding. Optional binding will make the optional value to become a temporary constant or variable, once the if or if-else statement checked that the optional is valued.\r\n\r\nCompare to force unwrapping, you don’t have to use a “!” suffix to access the value from optional binding. The optional binding variable or constant can be used in that particular statement.\r\n\r\nUse if let aConstant for constants with optional binding and if var aVariable for variable with constant binding.\r\n', 'if var actualSnitch = Int(snitch){\r\n     print(\"This optional variable is valued which is \\(actualSnitch)\")\r\n} else {\r\n     print(\"This optional variable is valueless\")\r\n}\r\n// This optional variable is valued which is 69\r\n', NULL, NULL, NULL, NULL, 5),
(28, 'Implicitly Unwrapped Optionals', NULL, 'As described above, optionals indicate that a constant or variable is allowed to have “no value”. Optionals can be checked with an if statement to see if a value exists, and can be conditionally unwrapped with optional binding to access the optional’s value if it does exist.\r\n\r\nSometimes it’s clear from a program’s structure that an optional will always have a value, after that value is first set. In these cases, it’s useful to remove the need to check and unwrap the optional’s value every time it’s accessed, because it can be safely assumed to have a value all of the time.\r\n\r\nThese kinds of optionals are defined as implicitly unwrapped optionals. You write an implicitly unwrapped optional by placing an exclamation mark (String!) rather than a question mark (String?) after the type that you want to make optional.\r\n', 'let possibleString: String? = \"Optional\"\r\nlet forcedString: String = possibleString!\r\n// requires an exclamation mark\r\n\r\nlet assumedString: String! = \"Implicitly unwrapped optional\"\r\nlet implicitString: String = assumedString\r\n// no need for an exclamation mark\r\n', 'However, you can still treat an implicitly unwrapped optional like a normal optional, to check if it contains a value, or use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement.', 'if assumedString != nil {\r\n     print(assumedString!)\r\n}\r\n// Prints \"Implicitly unwrapped optional\"\r\n// Force unwrapping\r\n\r\nif let definiteString = assumedString {\r\n     print(definiteString)\r\n}\r\n// Prints \"Implicitly unwrapped optional\"\r\n// Optional Binding\r\n', NULL, NULL, NULL, NULL, 5),
(29, 'Enumerations', NULL, 'An enumeration defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code.\r\n\r\nTo define an enumeration, use an enum keyword and put the name of the enumeration. Then, use a case keyword for each new enumeration cases within a brace. It is a good practise that make your enumeration name starts with capital letter, as each enumeration definition defines a new type.\r\n\r\nYou may declare each case line by line, or within a same line separated by commas.\r\n', 'enum ApplePlatform {\r\n     case iOS\r\n     case macOS\r\n     case watchOS\r\n     case tvOS\r\n} // line by line\r\n\r\nenum ApplePlatform {\r\n     case iOS, macOS, watchOS, tvOS\r\n} // within a same line separated by commas\r\n', 'You may assign a value with enumerated type to a variable or a constant. Once the variable is initialized with one of the possible values of that particular enumeration, the type of that variable will be inferred. Therefore, you can set the inferred variable the different value from the same enumeration, without putting the enumeration name itself. No break keyword is required.', 'var currentPlatform = ApplePlatform.iOS\r\n\r\ncurrentPlatform = .macOS\r\n', 'You may use a switch statement to match an individual enumeration.', 'switch currentPlatform {\r\n     case .iOS:\r\n          print(\"Your device is either iPhone, iPad or iPod touch\")\r\n     case .macOS:\r\n          print(\"Your device is either iMac, Mac mini, or MacBook\")\r\n     case .watchOS:\r\n          print(\"Your device is Apple Watch\")\r\n     case .tvOS:\r\n          print(\"Your device is either Apple TV HD or Apple TV 4K\")\r\n} // Your device is either iMac, Mac mini, or MacBook\r\n', NULL, NULL, 6),
(30, 'Functions', NULL, 'It will become high cohesion and difficult to maintain when all logics are put together in a same place. To overcome this problem, we can use functions to separate all logics into many modules. Functions usually receive the data, process the data, and return the processed data as a result.\r\n\r\nEvery function has a name and a brace for one or more statement. It may have parameter(s) to receive the data, and a return type to return the result back to the main program. Functions always start with a keyword func.\r\n', 'func student(name: String) -> String {\r\n     let hello = \"Hi, \" + name + \"!\"\r\n     return hello\r\n}\r\n\r\n//student is the function name\r\n//(name: String) is the parameter\r\n//return hello is the return type, in this case this function will return a String type\r\n', 'You may call a function to the main program, either assign with a variable or constant, or print the function directly. In this case, you may call the function student(name:) and pass a String value as a parameter.', 'print(student(name: \"Tokisaki Kurumi\"))\r\n// Hi, Tokisaki Kurumi\r\n\r\nlet student2 = student(name: \"Yatogami Tohka\")\r\nprint(student2)\r\n// Hi, \"Yatogami Tohka\r\n', NULL, NULL, NULL, NULL, 6),
(31, 'Parameters, Part 1', NULL, 'Functions without parameters\r\n\r\nIt is not necessary to have input parameters for a function when the function itself does not need to process any input data. However, a round bracket is still a must for each function. You just need to put an empty round bracket for function without parameters.\r\n', 'func sayHello() -> String{\r\n     return \"hello world\"\r\n}\r\n\r\nprint(sayHello())\r\n// hello world\r\n', 'Function with multiple parameters\r\n\r\nA function can have more than one input parameters, each parameter will be separated by using commas within the same round bracket.\r\n\r\nTake note that you can have multiple functions with the same function name, if the number of parameters is different, or same parameter numbers but with different parameter name type.\r\n', 'func student(name: String, year: Int) -> String {\r\n     let hello = \"Hi, \" + name + \" from \" + year + \"intake!\"\r\n     return hello\r\n}\r\n\r\nprint(student(name: \"Shinji\", year: 2017))\r\n// Hi, Shinji from 2017 intake!\r\n', 'Argument labels and parameter names\r\n\r\nEach function parameter has a parameter name and an argument label. If no argument label is provided (as in the function examples above), the parameter name is taken as the argument label. The argument label is written before the parameter name and separated by a space.\r\n\r\nThe argument label is used when calling the function; each argument is written in the function call with its argument label before it. The parameter name is used in the body of the function. Argument label helps the function become more English like to increase the readability.\r\n', 'func student(name: String, intake year: Int) -> String {\r\n     let hello = \"Hi, \" + name + \" from \" + year + \"intake!\"\r\n     return hello\r\n} // intake is the argument label\r\n\r\nprint(student(name: \"Shinji\", intake: 2017))\r\n// Hi, Shinji from 2017 intake!\r\n', 'Omitting argument labels\r\n\r\nIf you don’t want an argument label for a parameter, write an underscore (_) instead of an explicit\r\nargument label for that parameter.\r\n\r\nWhen you call the function, you may just put a value into the omitted argument label parameter directly.\r\n', 'func student(_ name: String, _ year: Int) -> String {\r\n     let hello = \"Hi, \" + name + \" from \" + year + \"intake!\"\r\n     return hello\r\n}\r\n\r\nprint(student(\"Shinji\", 2017))\r\n// Hi, Shinji from 2017 intake!\r\n', 6),
(32, 'Parameters, Part 2', NULL, 'Default parameter values\r\n\r\nYou can define a default value by assigning a value to any parameter after the parameter type in a function. You can omit the parameter with default values when calling the function. \r\n\r\nYou may also pass a new value to the parameter with default value, to replace the default value of that parameter.\r\n', 'func student(name: String, year: Int = 2017) -> String {\r\n     let hello = \"Hi, \" + name + \" from \" + year + \"intake!\"\r\n     return hello\r\n} // year is assigned with a default value\r\n\r\nprint(student(name: \"Shinji\"))\r\n// Hi, Shinji from 2017 intake!\r\n\r\nprint(student(name: \"Shinji\", year: 2020))\r\n// Hi, Shinji from 2020 intake!\r\n', 'Variadic parameter\r\n\r\nEach function may have at most one variadic parameter, which accepts zero or multiple values of a specific type. To declare a variadic parameter, use (...) after the parameter\'s type name.\r\n', 'func mean(_ numbers: Double...) -> Double {\r\n     var total: Double = 0\r\n     for number in numbers {\r\n          total += number\r\n     }\r\n     return total / Double(numbers.count)\r\n}\r\n\r\nlet mean1 = mean(1.0, 2.0, 3.0, 4.0, 5.0)\r\n// returns 3.0, the mean of these five numbers\r\n', 'In-out parameter\r\n\r\nIn default, function parameters are constants, therefore it is impossible to change the parameter value from within the body. If you want a function that can change a parameter\'s value and make sure these changes to persist after the function call has ended, you should you an in-out parameter instead.\r\n\r\nYou just need to write an inout keyword before a parameter\'s type, and place an ampersand (&) directly before a variable\'s name when you are calling the function. However, you can only pass a variable as the argument for an in-out parameter instead of a constant or a literal value, as both of them cannot be modified. In-out parameters simulates a pass-by reference from other programming language.\r\n\r\nBased on the code example below, this is a function that swaps the parameter\'s values.\r\n', 'func swapTwoInts(_ a: inout Int, _ b: inout Int) {\r\n     let temporaryA = a\r\n     a = b\r\n     b = temporaryA\r\n}\r\n\r\nvar someInt = 3\r\nvar anotherInt = 107\r\n\r\nswapTwoInts(&someInt, &anotherInt)\r\n\r\nprint(\"someInt is now \\(someInt)\")\r\n// someInt is now 107\r\n\r\nprint(\"anotherInt is now \\(anotherInt)\")\r\n// anotherInt is now 3\r\n', NULL, NULL, 6),
(33, 'Return Values', NULL, 'Functions without return values\r\n\r\nIt is not necessary to have return type for a function when the function itself does not need to return any result. Therefore, you do not need to include any return arrow (->) or a return type, as the function itself will become void. However, you may do so by state the return arrow as Void.\r\n', 'func printSomething() {\r\n     print(\"Once a wise VTuber, Gawr Gura said: a.\")\r\n} // without any return arrow or return type\r\n\r\nfunc printSomething() -> Void {\r\n     print(\"Once a wise VTuber, Gawr Gura said: a.\")\r\n} // with a return arrow that states the function as void.\r\n', 'Functions with multiple return values\r\n\r\nYou can use a tuple as a function’s return type to return multiple return values. The code below defines a function called minMax(numbers:), which finds the smallest and largest numbers in an array of Int values. Once the process in the function is done, this function will return a tuple that contains two integer values. The value of the tuples are labelled as min and max, so that they can be accessed by name easily.\r\n\r\nTake note that the tuple’s members do not need to be named at the point that the tuple is returned from the function, because their names are already specified as part of the function’s return type.', '\r\nfunc minMax(numbers: [Int]) -> (min: Int, max: Int) {\r\n     var currentMin = numbers [0]\r\n     var currentMax = numbers [0]\r\n     for index in 1..<numbers.count {\r\n          let theNumber = numbers[index]\r\n          if theNumber < currentMin {\r\n               currentMin = theNumber\r\n          }\r\n          if theNumber > currentMax {\r\n               currentMax = theNumber\r\n          }\r\n     }\r\n     return (currentMin, currentMax)\r\n}\r\n\r\nlet bounds = minMax([8, -6, 2, 109, 3, 71])\r\nprint(\"min is \\(bounds.min) and max is \\(bounds.max)\")\r\n// min is -6 and max is 109\r\n\r\n', 'However, there’s one problem in this function, which is it does not perform any safety check on the passed array. It is dangerous to pass an empty array to the function as it will trigger a runtime error when the function is attempting to access the first element of the array.\r\n\r\nTo handle an empty array safety, you may change the return type to an optional tuple return type. When the array is empty, the function will return a nil value.\r\n', 'func minMax(numbers: [Int]) -> (min: Int, max: Int) ? {\r\n     if numbers.isEmpty {\r\n          return nil\r\n     } else {\r\n          //logic shown as the previous code\r\n     }\r\n     return (currentMin, currentMax)\r\n}\r\n', 'Once you make the function return type become optional tuple, you may use optional binding to check whether the function returns an actual tuple value or nil.', 'if let bounds = minMax(array: [8, -6, 2, 109, 3, 71]) {\r\n     print(\"min is \\(bounds.min) and max is \\(bounds.max)\")\r\n}\r\n// min is -6 and max is 109\r\n', 6),
(34, 'Closures', NULL, 'Closures are self-contained blocks of functionality that can be passed around and used in the code. In short, it is like a function without the function name and the func keyword.\r\n\r\nHere’s the syntax of the closure expression.\r\n', '{ (parameters) -> return type in statements\r\n}\r\n', 'Let’s use an example which is make the names from an array sorted backward. \r\n\r\nIn general, you will create a function named backward with two String parameters, and a boolean return type that returns first string is greater than the second string. Next, you will declare an array with four initialized elements. Finally, you will call the sorted(by:) method and pass the backward function as the argument. As you can see, the names are reversed.\r\n', 'func backward(_ s1: String, _ s2: String) -> Bool {\r\n      return s1 > s2\r\n}\r\n\r\nlet names = [\"Chris\", \"Alex\", \"Barry\", \"Ewa\"]\r\n\r\nvar reversedNames = names.sorted(by: backward)\r\n// reversedNames contains [\"Ewa\", \"Chris\", \"Barry\", \"Alex\"]\r\n', 'But you don’t have to do such tedious way to reverse names from an array if you use a closure. You just need to put the statements and parameter from backward function directly in to the argument of sorted(by:) method. The keyword of the closure is “in”.', 'var reversedNames = names.sorted(by:\r\n     {(s1: String, s2: String) -> Bool in\r\n          return s1 > s2\r\n     }\r\n)\r\n', NULL, NULL, 6),
(35, 'Introduction of Dictionaries', NULL, 'Imagine you have a thick Oxford English dictionary. When you want to find a noun \"computer\", you will see the definition of \"computer\" which is \"an electronic machine that can store, organize and find information, do processes with numbers and other data, and control other machines\". In other words, if you want to find a definition of the word, you must find the word first.\r\n\r\nThis concept is same as the Swift\'s dictionaries. A dictionary is a collection of key-value pairs. In each pair, key (word) is the first elements, and the value (definition) is the second elements. Each value is associated with a unique key, which acts as an identifier for that value within the dictionary. All keys must be of the same type and all the values must also be of the same type.\r\n', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 7),
(36, 'Create a Dictionary', NULL, 'Similar to array, you may use an initializer syntax to create an empty dictionary with a certain dictionary type. Also, if you want to check whether a dictionary is empty, you may use isEmpty property that return Boolean values.', 'var testScoreDict = [String: Int]() // initializer syntax\r\n\r\nif (testScoreDict.isEmpty) {\r\n     print(\"This dictionary is empty\");\r\n} else {\r\n     print(\"This dictionary is not empty\");\r\n}\r\n// prints \"This dictionary is empty.\"\r\n', 'If you want to create a dictionary with key-value pair(s), you may initialize it with a dictionary literal. A dictionary consists of at least one key-value pair, and it is written as a list of key-value pairs, separated by commas, surrounded by a pair of square brackets: [key 1: value 1, key 2: value 2, key 3 value 3]. Take note that [key 1: value 1] is a pair, and [key 2: value 2] is another pair.', 'var testScoreDict: [String:Int] = [\"Bahasa Melayu\":98, \"Bahasa Inggeris\":95, \"Bahasa Cina\":84, \"Sejarah\":82]\r\n// this dictionary has been initialized with 4 key-value pairs.\r\n', 'Dictionary in Swift also supports type inference, therefore you may create a dictionary straightforward without writing the type of the dictionary, if you have initialized with a dictionary literal.', 'var englishScoreArr = [\"Reading\": 100, \"Speaking\":95, \"Writing\":98, \"Listening\":90] // this dictionary is inferred to [String:Int] type', 'You may make an existing dictionary empty again by assigning a literal that represents an empty dictionary.', 'testScoreDict = [:]\r\n// this dictionary becomes an empty dictionary again with the type [String: Int]\r\n', 7),
(37, 'Add Items, Retrieve Values, and Count Items', NULL, 'You may add a new item into a dictionary by using a subscript syntax. Make sure the key and value for the item(s) you want to add is same as the declared dictionary.', 'testScoreDict[\"Mathematics\"] = 100\r\n// 1 key-value pair is added into the testScoreDict, with a total of 5 pairs\r\n', 'If you want to retrieve a value in a dictionary, you may use a subscript syntax to pass the key you want to retrieve within square brackets immediately after the name of the dictionary.\r\n\r\nBut sometimes it is possible to request a key which does not exists, an optional value of the dictionary\'s value type is returned. Therefore, you must force unwrapping the dictionary to access the value from that particular pair.\r\n', 'var firstItem = testScoreDict[\"Bahasa Cina\"]! // firstItem contains 84', 'You may use optional binding to test whether there is a value from the key-value pair.', 'if let firstItem = testScoreDict[\"Bahasa Cina\"] {\r\n     print(\"The score of this subject is \\(firstItem).\")\r\n} else {\r\n     print(\"That subject is not found in test score dictionary.\")\r\n}\r\n// The score of this subject is 84.\r\n', 'To find out the total number of items in a dictionary, you may use a count property. This property is read-only.', 'print(testScoreDict.count) // Prints 5', 7);
INSERT INTO `topicsections` (`sectionID`, `sectionName`, `editorLink`, `sectionText1`, `sectionCode1`, `sectionText2`, `sectionCode2`, `sectionText3`, `sectionCode3`, `sectionText4`, `sectionCode4`, `topicID`) VALUES
(38, 'Modify, Delete and Iterate items', NULL, 'You can use subscript syntax to change an existing value associated with a particular key.', 'testScoreDict[\"Sejarah\"]  = 90\r\n// value for \"Sejarah\" has been changed to 90\r\n', 'You may remove a key-value pair by assigning a nil value for that key.', 'testScoreDict[\"Sejarah\"]  = nil\r\n// Sejarah has now been removed from the dictionary\r\n', 'If you want to list out all items from a dictionary, you may use a for-in loop to do so, declare both key and value with your desired name in a same round bracket. However, all of the listed items will not be in the ordering form.', 'for (subject, score) in testScoreDict{\r\n    print(subject) // subject is the key\r\n}\r\n', NULL, NULL, 7),
(39, 'Difference Between Tuples and Dictionary', NULL, 'You cannot add a new value into a tuple, but you may do so in dictionary.\r\nYou can have different data types in a tuple, but in dictionary, key must be in the same data type, and the values too. But the values data type is not necessary to same as the key data type.\r\n', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 7),
(40, 'Introduction and Comparison of Structures and Classes', NULL, 'Same as other programming languages, Swift is also supporting object-oriented programming which focus on objects (or instance) that contains both data and related actions. Just imagine that you create a jelly mold, and you use the jelly mold to make jelly with different colors, flavors and fruits, but all of your jellies will have the same shape or pattern.\r\n\r\nThis is how a structure or a class works. Structures and classes are general-purpose, flexible constructs that acts like a template of an instance, you can define properties and methods into your structures and classes to make them more functional. In Swift, you just need to use a .swift file for each class or structure, instead of two files such as header file and implementation file.\r\n', NULL, 'Structures and classes in Swift have the similarities:\r\n1) They can define properties to store values\r\n2) They can define methods to provide functionality\r\n3) They can define initializers to set up their initial state\r\n\r\nHowever, classes can do these things that structures cannot do:\r\n1) Define inheritance that enables one class to inherit the characteristics of another\r\n2) Define type casting that enables checking and interpreting the type of a class instance at runtime\r\n3) Define deinitializers that enable an instance of a class to free up any resources it has assigned\r\n4) Define reference counting that allows more than one reference to a class instance\r\n', NULL, NULL, NULL, NULL, NULL, 8),
(41, 'Definition of Structures and Classes, and Its Instances', NULL, 'Below code is the example of a class and a structure. As you can see, both structure and class have three properties with initialized values.\r\n\r\nIt is a good practice to let the structure and class name starts with capital letter to match the standard Swift types (String, Int, Bool), and let property and method name starts with lower case letter to differentiate them from type names.\r\n', NULL, 'To create a new instance of a structure or a class, use an initializer syntax. Make sure your instance name is starts from a lowercase letter.', 'let performance = Performance()\r\nlet phone = Phone()\r\n', NULL, NULL, NULL, NULL, 8),
(42, 'Value Types and Reference Type', NULL, 'Structures and Enumerations are value types, whereas classes are reference types. ', NULL, 'A value type is a type whose value is copied when it’s assigned to a variable or constant, or when it’s passed to a function. In fact, all of the basic types in Swift—integers, floating-point numbers, Booleans, strings and arrays—are value types.\r\n\r\nIn short, once the instance of the structure is changed, another instance from the same structure will not be affected.\r\n\r\nLook at the code below, an instance named distance from the structure Distance is created with a value of 100 for the property mile. Another instance named distance2 has been created by assigning with the instance distance, and the property value becomes 300. However, the value are pointed to different instances, therefore the property value in distance2 does not affect the property value in distance.\r\n', 'struct Distance: Equatable{\r\n     var miles:Double\r\n}\r\nvar distance = Distance(miles:100)\r\nvar distance2 = distance\r\ndistance2.miles = 300.00\r\nprint(distance) // 100\r\nprint(distance2) // 300\r\n', 'In contrast, reference types are not copied when they are assigned to a variable or constant, or when they are passed to a function. Rather than a copy, a reference to the same existing instance is used.\r\n\r\nIn short, once the instance of the class is changed, another instance from the same class will be affected.\r\n\r\nLook at the code below, an instance named color1 from the class Color is created with a default value of \"red\". Another instance named color2 has been created by assigning with the instance color1, and the value becomes \"blue\". As both instances are point to the same address, therefore the property value in color2 will affect the property value in color1.\r\n', 'class Color{\r\n     var name = “red”\r\n}\r\nvar color1 = Color()\r\nvar color2 = color1\r\ncolor2.name = “blue”\r\nprint(color1.name) // blue\r\n', 'So, how do you find out whether two constants or variables are referred to exactly the same instance of a class?\r\n\r\nYou may use identical to operator (===) and not identical to (!==) operator.\r\n\r\nTake note that identical to (===) is not exactly the same as the operator equal to (==). This is because equal to means that two instances are considered equal in value, whereas identical to means two constants or variable of a class type refer to exactly the same class instance.\r\n', 'if color1 === color2 {\r\n     return true\r\n} // true, as both are refer to the same Color instance\r\n', 8),
(43, 'Initializers and Initialization, Part 1', NULL, 'Initialization is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use.\r\n\r\nYou implement this initialization process by defining initializers, similar to constructors in C# or Java. Initializers do not return a value.\r\n', NULL, 'Classes and structures must set all of their stored properties to an appropriate initial value by the time an instance of that class or structure is created. \r\n\r\nTo do so, you can either assign a default value to a property or use an initializer (or constructor in C++, C# and Java). If you assign a default value to a property, you don’t have to provide an initializer. Otherwise, you should.\r\n\r\nTake note that the keyword “self” is similar to “this” in C++, C# and Java. The keyword “self” must be used when a parameter name has the same name as a property of that instance.\r\n', '// Assign property default value\r\nclass Celsius {\r\n     var temperature: Double = 100.0\r\n}\r\nlet celsius = Celsius()\r\nprint(celsius.temperature)\r\n// Prints 100.0\r\n\r\n// Create an initializer\r\nclass Celsius {\r\n     var temperature: Double\r\n     init(temperature: Double) {\r\n          self.temperature = temperature\r\n     }\r\n}\r\nlet celsius = Celsius(temperature: 100.0)\r\nprint(celsius.temperature)\r\n// Prints 100.0\r\n', 'If some of the properties don\'t need to be initialized or assign with a default value, use an optional to initialize that property to nil value.', 'class Celsius {\r\n     var temperature: Double\r\n     var status: String?\r\n\r\n     init(temperature: Double) {\r\n          self.temperature = temperature\r\n     }\r\n}\r\nlet celsius = Celsius(temperature: 100.0)\r\n// temperature is initialized to 100.0 and status is initialized to nil\r\n\r\ncelsius.status = \"Hot\"\r\n// status now contains the string \"Hot\"\r\n', 'What if you do not have at least one self-defined initializer in your class or structure? Don\'t worry, Swift will automatically provide a default initializer without any parameters. It sets all the properties to their default values.', 'class Celsius {\r\n     var temperature: Double = 100.0\r\n}\r\n// An instance is created using a default initializer\r\nlet celsius = Celsius()\r\n', 8),
(44, 'Initializers and Initialization, Part 2', NULL, 'But sometimes the initializer might receive invalid parameter values, such as an external valueless resource. It might be dangerous to the program as the instance from the class might be unable to be initialized successfully, and may cause serious bugs occur.\r\n\r\nTherefore, you can make the initializers failable to fail the initialization of the instance, by placing a question mark after the init keyword to become optional initializer (init?), or an exclamation mark after the init keyword to become implicity unwrapped optional initializer (init!).\r\n', 'struct Plant {\r\n     let species: String\r\n\r\n     init?(species: String) {\r\n          if species.isEmpty { return nil }\r\n          self.species = species\r\n     }\r\n}\r\n', 'To check the initialization is succeed or failed, just create two new instances, and put a non-empty string and an empty string into the instance respectively.', 'let plant1 = Plant(species: \"Coconut\")\r\nlet plant2 = Plant(species: \"\")\r\n\r\nif let coconut = plant1 {\r\n     // print(\"The coconut nut is a giant nut, if you eat too much, you\'ll get very fat\")\r\n}\r\n\r\nif plant2 == nil {\r\n     // print(\"Plant could not be initialized\")\r\n}\r\n', NULL, NULL, NULL, NULL, 8),
(45, 'Properties, Part 1', NULL, 'Properties are variables inside a class, a structure or an enumeration to accept values with different data types. Let\'s imagine back to the jelly mold. Colors, flavors and fruits are the properties of the jelly mold. Red color, strawberry flavors and raspberry are the value of these three properties.\r\n\r\nThere are two types of properties in Swift which are stored properties and computed properties. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures.\r\n\r\nTo access a property of an instance, or assign a new value to a property, use a dot syntax.\r\n', 'print(\"iPhone 12 Pro was announced in \\(phone.year)\") // access a property\r\n// iPhone 12 Pro was announced in 2020\r\n\r\nphone.year = 2021 // assign a new value\r\n', 'Stored property is a constant or a variable that is stored as part of an instance of a particular class and structure. You use var for variable stored properties and let for constant stored properties.\r\n\r\nYou can provide a default value for a stored property within the class or structure, or change its\' initial value through initialization. Please refer back to Topic 1 to recall back constants and variables.\r\n\r\nTake note that unlike C# and Java, Swift unifies the concepts of instance variable and property into a single property declaration. Therefore, the Swift property does not have a corresponding instance variable, and the storage for a property is not accessed directly.\r\n', 'class Anime {\r\n     var kirito = 3\r\n     let asuna = 4\r\n}\r\n\r\nvar anime = Anime()\r\nanime.kirito = 4\r\n// value of kirito changed to 4\r\n\r\nanime.asuna = 0\r\n// returns a compile error\r\n', 'Computed properties do not actually store a value. Instead, they provide a getter to retrieve a value and an optional setter to set a new value. Similar to a get method and set method in C# and Java.', 'struct SAO {\r\n     var kirito:Int\r\n     var asuna:Int\r\n\r\n     var yui:Int {\r\n          get {\r\n               return kirito + asuna\r\n          }\r\n          set {\r\n               asuna = kirito - newValue + 4\r\n          }\r\n     }\r\n}\r\n\r\nvar sao = SAO(kirito: 10, asuna: 7)\r\nprint(sao.yui) // getter: 10 + 7 = 17\r\n\r\nsao.yui = 4\r\nprint(sao.asuna) // setter: 10 - 4 + 4 = 10\r\n', 'It is not necessary to have a setter computed property (getter is a must). This type of computed property is known as a read-only computer property, which means you can only retrieve data but not changing the data. Some programmers use read-only computed property to prevent any malicious modification.\r\n\r\nFor read-only computed property, you do not need to have the get keyword and braces.\r\n', 'struct SAO {\r\n     var kirito = 10\r\n     var asuna = 7\r\n\r\n     var yui:Int {\r\n          return kirito + asuna\r\n     }\r\n}\r\n', 8),
(46, 'Property, Part 2', NULL, 'Type properties are a type of property that can also be associated with the type itself. In such words, it is similar to class or static variable in C# or Java.\r\n\r\nIt is useful to define values that are universal to all instances of a particular type. such as a constant property that all instances can use. There will only ever be one copy of these properties, no matter how many instances of that type you create (normally constant).\r\n\r\nTo define a type property, just put a static keyword before var or let keyword.\r\n', 'struct SomeStructure {\r\n     static var storedTypeProperty = \"Structure value.\"\r\n\r\n     static var computedTypeProperty: Int {\r\n          return 1\r\n     }\r\n}\r\n\r\nclass SomeClass {\r\n     static var storedTypeProperty = \"Class value.\"\r\n\r\n     static var computedTypeProperty: Int {\r\n          return 27\r\n     }\r\n}\r\n', 'Type properties are queried and set with dot syntax, just like instance properties. However, type properties are queried and set on the type, not on an instance of that type.\r\n\r\nWhich means that you don’t have to create an instance before you call the method, you can just directly call the type property from the class or structure itself. \r\n', 'print(SomeStructure.storedTypeProperty)\r\n// Prints \"Structure value.\"\r\nprint(SomeStructure.computedTypeProperty)\r\n// Prints \"1\"\r\nprint(SomeClass.storedTypeProperty)\r\n// Prints \"Class value.\"\r\nprint(SomeClass.computedTypeProperty)\r\n// Prints \"27\"\r\n', NULL, NULL, NULL, NULL, 8),
(47, 'Methods', NULL, 'As mentioned earlier before, instance usually contains both data and related actions. To make the instance become more functional, you may declare a method, which are functions that are associated with particular type. Classes, structures and enumerations can all define instance methods and type methods.\r\n\r\nJust imagine that you are the creator of humans, and human are a class. You put heads, limbs and body as the property of the human. To make humans can perform an action rather than just let them sit on the ground and just waiting to die, you will define methods, such as eat, run, walk, sleep, and talk to them.\r\n', NULL, 'Instance methods are function that belong to instances of a particular class, structure or enumeration. To create an instance method, start with a func keyword and declare like a function.\r\n\r\nType methods are function that belong to the type itself, you may put a static keyword before a method\'s func keyword to create a type method.\r\n\r\nYou may refer back to Topic 6 for more details of functions.\r\n', 'class SomeClass {\r\n     func someFunc(){\r\n          // Instance method\r\n     }\r\n}\r\n\r\nclass SomeClassToo {\r\n     static func someFunc(){\r\n          // Type method\r\n     }\r\n}\r\n', 'Similar to access a property, you may call instance method and type method by using a dot syntax.', 'let class1 = SomeClass()\r\nclass1.someFunc()\r\n// calling an instance method\r\n\r\nSomeClassToo.someFunc()\r\n// calling a type method\r\n', NULL, NULL, 8),
(48, 'Inheritance and Subclasses', NULL, 'A class can inherit methods, properties, and other characteristics from another class. A class who inherits to another class is called superclass or base class, whereas a class who inherited by another class is called subclass or children class.\r\n\r\nInheritance is useful in object-oriented programming to increase the code reusability, which means that you don\'t have to waste time to rewrite the same thing in subclass. Instead, you can just use the characteristics from the parent class into your subclass.\r\n\r\nHere\'s an example of a based class called Vehicle, but the method called makeNoise performs nothing in the class. This is because the subclasses will make use of this method with customization.\r\n', 'class Vehicle {\r\n     var currentSpeed = 0.0\r\n     var description: String {\r\n          return \"traveling speed: \\(currentSpeed)\"\r\n     }\r\n     func makeNoise() {\r\n          // do nothing\r\n     }\r\n}\r\n', 'To define a subclass, put a colon with the superclass name, after the subclass name.', 'class Bicycle: Vehicle {\r\n     var hasBasket = false\r\n}\r\n', 'You may also subclass a subclass. To do so, declare a new subclass, put a colon with the previous subclass name, after the new subclass name.', 'class Tandem: Bicycle {\r\n     var currentNumberOfPassengers = 0\r\n}\r\n', 'If you create an instance of a subclass, you can work with any of its new and inherited properties, and query the read-only description property it inherits from its superclass.', 'let tandem = Tandem()\r\n\r\ntandem.hasBasket = true // hasBasket is from its superclass, Bicycle\r\n\r\ntandem.currentNumberOfPassengers = 2\r\n\r\ntandem.currentSpeed = 22.0 // current is from its superclass\' superclass, Vehicle\r\n\r\nprint(\"Tandem: \\(tandem.description)\")\r\n// Tandem: traveling speed: 22.0\r\n', 8),
(49, 'Overriding', NULL, 'A subclass can provide its own custom implementation of an instance method, type method, instance property, or type property that it would otherwise inherit from a superclass. This is known as overriding.\r\n\r\nYou can use the override keyword to prefix your overriding definition. In the code below, a new subclass of Vehicle named Train will override the method makeNoise() that inherits from Vehicle. Next, a new instance of Train is created and the method makeNoise() is called. This makeNoise() method is Train subclass version instead of the Vehicle superclass version.\r\n\r\nTo access the superclass version of a method, property, or subscript, use the super keyword as a prefix.\r\n', 'class Train: Vehicle {\r\n     override func makeNoise() {\r\n          print(\"Choo Choo\")\r\n     }\r\n}\r\n\r\nlet train = Train()\r\n\r\ntrain.makeNoise()\r\n// \"Choo Choo\"\r\n', 'You can also override an inherited instance or type property to provide your own custom property getter and setter, regardless of the type of property (stored or computed).\r\n\r\nYou can present an inherited read-only property as a read-write property by providing both a getter and a setter in your subclass property override. But you cannot present an inherited readwrite property as a read-only property.\r\n\r\nIf you provide a setter as part of property override, you must also provide a getter for that override, as getter is always a must in computed property. \r\n\r\nIn the code below, a new subclass of Vehicle named Car is defined and overrides the description property that inherits from Vehicle class to provide a custom description that includes the current gear.\r\n', 'class Car: Vehicle {\r\n     var gear = 1\r\n     override var description: String {\r\n          return super.description + \"; gear: \\(gear)\"\r\n     }\r\n}\r\n\r\nlet car = Car()\r\nprint(car.description)\r\n// \"travelling speed: 0.0; gear: 1\"\r\n', 'If you do not want some method or property from superclass to be overriden, just use a final keyword before the method or property introducer keyword, or put is before the class keyword to make the whole class as final.', 'final var finalProperty // for property\r\nfinal func finalMethod() {} // for method\r\n\r\nfinal class finalClass {} // for the whole class\r\n', NULL, NULL, 8),
(50, 'Initializer Inheritance and Overriding', NULL, 'In Swift, subclasses do not inherit their superclass initializers by default to prevent a simple initializer from a superclass is inherited by a more specialized subclass to use for creation of new subclass instance that is not fully or correctly initialized.\r\n\r\nWhen you write a subclass initializer that matches a superclass initializer, you are effectively providing an override of that initializer. Therefore, you must write the override modifier before the subclass’s initializer definition. This is true even if you are overriding an automatically provided default initializer.\r\n\r\nBased on this code example, a based class called WheeledVehicle is defined, without any custom initializers. As a result, a default initializer is created automatically to create a new instance with default value from the property.\r\n', 'class WheeledVehicle {\r\n     var numberOfWheels = 0\r\n     var description: String {\r\n          return \"\\(numberOfWheels) wheel(s)\"\r\n     }\r\n}\r\n\r\nlet wheeledVehicle = WheeledVehicle()\r\nprint(\"Vehicle: \\(wheeledVehicle.description)\")\r\n// Vehicle: 0 wheel(s)\r\n', 'Next, a subclass of WheeledVehicle called WheeledBicycle is defined, and an override initializer is defined to call the superclass default initializer. This ensures that the numberOfWheels inherited property is initialized by WheeledVehicle before WheeledBicycle has the opportunity to modify the property. After calling the super.init(), the original value of numberOfWheels is replaced with a new value of 2.', 'class WheeledBicycle: WheeledVehicle {\r\n      override init() {\r\n           super.init()\r\n           numberOfWheels = 2\r\n      }\r\n}\r\n', 'Once the WheeledBicycle instance is created, you can call the inherited description computed property to see the updated numberOfWheels property.', 'let wheeledBicycle = WheeledBicycle()\r\nprint(\"Bicycle: \\(wheeledBicycle.description)\")\r\n// Bicycle: 2 wheel(s)\r\n', NULL, NULL, 8),
(51, 'Deinitialization', NULL, 'If initialization is creation of an instance, then deinitialization is the destroyer of instance. Swift provides automatic reference counting (ARC) to handle the instance memory management, by deallocates unwanted instance to free up the resources, in order to improve the performance of the program.\r\n\r\nTypically you don\'t need to perform manual clean for deallocated instances, but you may do so if you want to perform some additional cleanup, such as file writing.\r\n\r\nYou may use a deinitializer with a deinit keyword, without any parameters and round bracket. Unlike initializer, deinitializer are only available on class type, and each class can have at most one deinitializer.\r\n', 'deinit {\r\n     // perform the deinitialization\r\n}\r\n', NULL, NULL, NULL, NULL, NULL, NULL, 8),
(52, 'A new section name', NULL, 'Blah blah blah', 'Some dirty codes', 'Where\'s my supper?\nOh no.', NULL, NULL, NULL, NULL, NULL, 1);

-- --------------------------------------------------------

--
-- Table structure for table `topictitles`
--

DROP TABLE IF EXISTS `topictitles`;
CREATE TABLE IF NOT EXISTS `topictitles` (
  `topicID` int(11) NOT NULL AUTO_INCREMENT,
  `topicName` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`topicID`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `topictitles`
--

INSERT INTO `topictitles` (`topicID`, `topicName`) VALUES
(1, 'Starts from Basics'),
(2, 'String and Characters'),
(3, 'Conditional Statements'),
(4, 'Arrays and Loops'),
(5, 'Optionals and Error Handling'),
(6, 'Enumerations and Functions'),
(7, 'Dictionaries'),
(8, 'Structures and Classes');

--
-- Constraints for dumped tables
--

--
-- Constraints for table `chats`
--
ALTER TABLE `chats`
  ADD CONSTRAINT `chatStudentID` FOREIGN KEY (`studentID`) REFERENCES `students` (`studentID`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `exercises`
--
ALTER TABLE `exercises`
  ADD CONSTRAINT `topicIDExercise` FOREIGN KEY (`topicID`) REFERENCES `topictitles` (`topicID`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `quizhistories`
--
ALTER TABLE `quizhistories`
  ADD CONSTRAINT `quizhistories_studentid_foreign` FOREIGN KEY (`studentID`) REFERENCES `students` (`studentID`) ON DELETE CASCADE,
  ADD CONSTRAINT `quizhistories_topicid_foreign` FOREIGN KEY (`topicID`) REFERENCES `topictitles` (`topicID`) ON DELETE CASCADE;

--
-- Constraints for table `quizzes`
--
ALTER TABLE `quizzes`
  ADD CONSTRAINT `topicIDQuiz` FOREIGN KEY (`topicID`) REFERENCES `topictitles` (`topicID`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `topicsections`
--
ALTER TABLE `topicsections`
  ADD CONSTRAINT `topicIDSection` FOREIGN KEY (`topicID`) REFERENCES `topictitles` (`topicID`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
